a
b
a
x
xxx
x
xxx
x
xxx
x
xxx
x
xxx
x
xxx
x
xxx
x
xxx
x
xxx
<!DOCTYPE html>
<script>

/*

This omni stringifier works in a multi step way

Reads: This is handled in a single step way, mostly like JSON.stringify, only difference being, it also handles functions, symbols and custom objects
Writes: 
This has two steps 
step 1: You don't actually stringify the object, you replace every reference inside the object with an object id, and return a new object 
example: {1:d} => {1:{__dynId: 2}}, a = > {__dynId: 4};

step 2: You iterate through the object, and convert every id into the actual path, or if no id is there, you simply stringify it like before

*/


(function() {
  var scope,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  scope = this;

  var objectToId = new WeakMap();
  var idToObject = new Map();


  var tracer; 
  var objectUID = 1;

function createXPathFromElement(elm) { 
    // var allNodes = document.getElementsByTagName('*'); 
    for (var segs = []; elm && (elm.nodeType == 1 || elm.nodeType == 3); elm = elm.parentNode) 
    { 
        /*if (elm.hasAttribute && elm.hasAttribute('id')) { 
                var uniqueIdCount = 0; 
                for (var n=0;n < allNodes.length;n++) { 
                    if (allNodes[n].hasAttribute('id') && allNodes[n].id == elm.id) uniqueIdCount++; 
                    if (uniqueIdCount > 1) break; 
                }; 
                if ( uniqueIdCount == 1) { 
                    segs.unshift('id("' + elm.getAttribute('id') + '")'); 
                    return segs.join('/'); 
                } else { 
                    segs.unshift(elm.localName.toLowerCase() + '[@id="' + elm.getAttribute('id') + '"]'); 
                } 
        } else if (elm.hasAttribute && elm.hasAttribute('class')) { 
            segs.unshift(elm.localName.toLowerCase() + '[@class="' + elm.getAttribute('class') + '"]'); 
        } else { */
          if (elm.localName) {
            for (i = 1, sib = elm.previousSibling; sib; sib = sib.previousSibling) { 
                if (sib.localName == elm.localName)  i++; }; 
                segs.unshift(elm.localName.toLowerCase() + '[' + i + ']'); 
          } else {
            for (i = 1, sib = elm.previousSibling; sib; sib = sib.previousSibling) { 
                if (sib.nodeType == 3)  i++; }; 
                segs.unshift("text()" + '[' + i + ']'); 
          }
        // }; 
    }; 
    return segs.length ? '/' + segs.join('/') : null; 
}; 

function lookupElementByXPath(path) { 
    var evaluator = new XPathEvaluator(); 
    var result = evaluator.evaluate(path, document.documentElement, null,XPathResult.FIRST_ORDERED_NODE_TYPE, null); 
    return  result.singleNodeValue; 
} 


  function stringify(obj) {
        try {
            return JSON.stringify(obj, function (key, value) {
              if (value && value.__isProxy)
                    value = value.__target;
              var fnBody;
              if (value instanceof Function || typeof value == 'function') {

                if ((/\{\s*\[native code\]\s*\}/).test(value.toString())) {
                    return value.name;
                }
                fnBody = value.toString();

                if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { /*this is ES6 Arrow Function*/
                  return '_NuFrRa_' + fnBody;
                }
                return fnBody;
              }
              if (value instanceof RegExp) {
                return '_PxEgEr_' + value;
              }
              return value;
            });
        } catch(e){
            return e;
        }
    };

  (function(definition) {
      return scope.Omni = definition();
  })(function() {
    var ContextResolver, Omni, MultiResolver, Resolver, Util;
    Util = {
      d2h: function(d) {
        return d.toString(16);
      },
      h2d: function(h) {
        return window.__tracerParseInt(h, 16);
      },
      supportsProto: {}.__proto__ != null,
      supportsFunctionNames: typeof (function() {}).name === "string"
    };
    Util.functionName = Util.supportsFunctionNames ? function(func) {
        if (func)
            return func.name;
        else return func
    } : function(func) {
      var _ref;
      return (_ref = func.toString().match(/function ([^(]*)/)) != null ? _ref[1] : void 0;
    };
    Util.isArray = Array.isArray ? Array.isArray : function(arr) {
      return Object.prototype.toString.call(arr) === "[object Array]";
    };
    Omni = (function() {

      Omni.name = 'Omni';

      Omni.NonPrototypeFunctionError = (function(_super) {

        __extends(NonPrototypeFunctionError, _super);

        NonPrototypeFunctionError.name = 'NonPrototypeFunctionError';

        function NonPrototypeFunctionError(object, name) {
          this.object = object;
          this.name = name;
          this.message = "[OMNI] Couldn't serialize object; had non-prototype function '" + this.name + "'";
        }

        return NonPrototypeFunctionError;

      })(Error);

      Omni.PrototypeNotFoundError = (function(_super) {

        __extends(PrototypeNotFoundError, _super);

        PrototypeNotFoundError.name = 'PrototypeNotFoundError';

        function PrototypeNotFoundError(object, cons_id) {
          this.object = object;
          this.cons_id = cons_id;
          this.message = "[OMNI] Prototype not found for object; looked for " + this.cons_id;
        }

        return PrototypeNotFoundError;

      })(Error);

      Omni.AnonymousConstructorError = (function(_super) {

        __extends(AnonymousConstructorError, _super);

        AnonymousConstructorError.name = 'AnonymousConstructorError';

        function AnonymousConstructorError(object) {
          this.object = object;
          this.message = "[OMNI]Couldn't resolve constructor name; seems it has an anonymous constructor and object's prototype has no #constructor_name property to provide hints";
        }

        return AnonymousConstructorError;

      })(Error);

      Omni.VersionInstancePropertyError = (function(_super) {

        __extends(VersionInstancePropertyError, _super);

        VersionInstancePropertyError.name = 'VersionInstancePropertyError';

        function VersionInstancePropertyError(object) {
          this.object = object;
          this.message = "[OMNI]Objects can't have versions on the instances; can only be on the prototype";
        }

        return VersionInstancePropertyError;

      })(Error);

      Omni.DOMConstructorError = (function(_super) {

        __extends(DOMConstructorError, _super);

        DOMConstructorError.name = 'DOMConstructorError';

        function DOMConstructorError(object) {
          this.object = object;
          this.message = "[OMNI] can't serialize dom|cssom objects";
        }

        return DOMConstructorError;

      })(Error);

      Omni.DOMXMLPathError = (function(_super) {
        __extends(DOMXMLPathError,_super);

        DOMXMLPathError.name = 'DOMXMLPathError';
        function DOMXMLPathError(object){
          this.object = object;
          this.message = "[OMNI] can't find dom using xml path";
        }
        return DOMXMLPathError;
      })(Error)

      function Omni(resolver) {
        this.resolver = resolver != null ? resolver : null;
        if (!(this.resolver != null)) {
          if (typeof window === "undefined") {
            throw new Error("[OMNI] A context-resolver is required in non-browser environments");
          }
          this.resolver = new ContextResolver(scope);
        }
        this.errorHandler = function(e) {
          throw e;
        };
        this.migrations = {};
      }

      var isDOMInheritedProperty = function(method){
        return method && (method instanceof EventTarget || method instanceof HTMLCollection || method instanceof NodeList || method.readState
            /*|| method.click || method.appendData*/) /*&& (method && method.self != method)*/
      }


      Omni.prototype.assignId = function(obj){
        if (!obj) return;
        var _id = objectToId.get(obj);
        if (!_id) {
            // Object.defineProperty(obj, "__Omni_id", {
            //     value : Util.d2h(this.counter++),
            //     writable: false,
            //     configurable: false, 
            //     enumerable: false
            // })
            _id = Util.d2h(this.counter++);
            objectToId.set(obj, _id);
        }
        return _id;
      }

      var handleProxyObjs = function(obj){
        var objId = __tracer.getIdFromProxy(obj);
        if (objId == null) return;
        var nodeId = obj.__debug || __tracer.getShadowStackHead();
        if (!nodeId) return;
        var writeLog = __tracer.getInvocationToWrites();
        if (!writeLog[nodeId])
          writeLog[nodeId] = [];
        var isBrokenReference;
        if (writeLog[nodeId]){
          writeLog[nodeId].forEach((entry)=>{
            if (entry[0] == "broken-reference" && entry[1]== objId)
              isBrokenReference = true;
          })
        }
        if (isBrokenReference)
          return null;
        writeLog[nodeId].push([obj.__isProxy, objId]);
        return {__dynId:objId, state: obj.__isProxy, nodeId: obj.__debug};
      }

      var handleProxyIds = function(id,state,nodeId){
        var path = __tracer.getPathFromProxyId(id,state,nodeId);
        if (path)
           return {__dynPath: path};
      }

      Omni.prototype.counter = 0;

      var OMNI_SIZE_LIMIT=10000;
      Omni.prototype.size = 0;

      var customStringify = function(input){
        var ignoreLSKeys = ["fnCacheExists","keyMap","signature"]
        return JSON.stringify(input, function(key, value){
            if (ignoreLSKeys.indexOf(key)<0)
              return value;
        })
      }

      function isNative(fn) {
        return (/\{\s*\[native code\]\s*\}/).test('' + fn);
      }

      function exposeClosureScope(input, closureStringifier, seen_objs){
        var clObj = input.__getScope__ && input.__getScope__();
        if (!clObj){
          //If global function, then alright to not have scope exposed since it
          // is not a closure function. Otherwise, error 
          if (input.name && window[input.name] == input)
            return "";
          else throw new Error("Closure scope could not be exposed"); 
        }
        var closureStr = {};
        Object.keys(clObj).forEach((k)=>{
          if (k.indexOf("set")>=0 || k == "__isClosureObj"
            || input == clObj[k]) return;
          closureStr[k] = clObj[k];
          // closureStr += " var " + k + " = " + stringifier(clObj[k],"read",2) + ";";
        })
        return closureStringifier.stringify(closureStr,"write",2, seen_objs);
      }

      /*
        Returns a an array where the first index is the stringified value is non primitive
        otherwise the value itself. The second indicates whether the input was a primitive data
        type
      */
      Omni.prototype.stringify = function(input,state,stage, seen_objs) {
        try {

          var arr, i, result, output,_id;

          var seen_objs;
          if (!seen_objs)
            seen_objs = new Set();
          else seen_objs = seen_objs;
          this.size = 0;
          this.processed_inputs = [];
          var strDelim = ";;&;;";
          var emptyFn = function(a){return a};
          var stringify = state == "read" || stage == 2 ? function(o,skipMD){
            var str = JSON.stringify(o);
            if (state != "read" || skipMD)
              return str;
            var finalStr;
            if (o && Array.isArray(o)){
              finalStr = str + strDelim + "array" + strDelim + Object.keys(o).length + strDelim + o.__proto__.constructor.name;
            } else if( o && typeof o == "object")
              finalStr = str + strDelim + typeof o + strDelim + Object.keys(o).length + strDelim + o.__proto__.constructor.name;
            else if (o) finalStr = str + strDelim + typeof o + strDelim + o.__proto__.constructor.name;
            else finalStr = str;
            return finalStr;
          }: emptyFn; 
          var primStringify = state == "read" || stage == 2 ? function (a){
            return [a + strDelim + typeof a,true];
          } : function (a){
            return a;
          };
          var _encodeURI = state == "read" || stage == 2 ? encodeURI : emptyFn; 

          if (state == "write" && stage == 1 && input && input.__isProxy){
            var _ret = handleProxyObjs(input);
            if (_ret) return stringify(_ret);
          } else if (state == "write" && stage == 2 && input && input.__dynId){
            var _ret = handleProxyIds(input.__dynId, input.state, input.nodeId);
            if (_ret) return stringify(_ret);
          }

          if (input && input.__isProxy)
              input = input.__target;

          if (input && input instanceof Storage)
            return customStringify(input);

          result = (function() {
            var _i, _len;
            switch (typeof input) {
              case "number":
              case "boolean":
                return primStringify(input);
              case "string":
                return primStringify((input));
              case "symbol":
                if (state == "write") 
                  throw new Error("[OMNI] can't serialize symbols");
                else return "";
                break;
              case "function":
                // if (state == "write") 
                //   throw new Error("[OMNI] can't serialize functions");
                if (state == "read") return "__func__source";
              default:
                if (state == "write")
                  _id = this.assignId(input);
                if (isDOMInheritedProperty(input)){
                  __tracer.updateDC();
                  var dom2json = {};
                  dom2json.xpath = createXPathFromElement(input);
                  /*Not an accurate check since some documents objects don't
                   satisfy this condition, hence commenting*/
                  if (input.__proto__.constructor.name == "HTMLDocument") {
                    // dom2json = domJSON.toJSON(input,{
                    //   deep: false,
                    //   attributes : ['id'],
                    //   domProperties: false,
                    // });
                    if (state == "write") 
                      dom2json.document = true;
                  }
                  if (state == "write") {
                    dom2json.__Omni_id = _id;
                    dom2json.__Omni_type = "DOM";
                  }
                
                  return stringify(dom2json,true);
                }
                // try {
                //   var __s =  JSON.stringify(input);
                // } catch (e){
                //   if (e.name == "TypeError")
                //     throw new Error("circular Object error");
                // }
                if (Util.isArray(input)) {
                  seen_objs.add(input);
                  arr = [];
                  for (_i = 0, _len = input.length; _i < _len; _i++) {
                    i = input[_i];
                    arr.push(this.analyze(i,state,seen_objs,stage));
                  }
                  // if (state == "write") 
                    // arr.push({__Omni_id:_id});
                  // arr.__Omni_id = input.__Omni_id;
                  return stringify(arr);
                } else {
                  // seen_objs.add(input);
                  output = this.analyze(input,state,seen_objs,stage);
                  if (output == null)
                    return primStringify(output);
                  return stringify(output);
                }
            }
          }).call(this);
          return result;
        } catch (e){
            return e;
        }
      };

      Omni.prototype.cleanAfterStringify = function() {
        var input, _i, _len, _ref;
        _ref = this.processed_inputs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          if (input) {
            delete input.__Omni_id;
          } 
          // if (Util.isArray(input)){
          //   input.pop();
          // }
        }
        return true;
      };

      Omni.prototype.analyze = function(input,state,seen_objs,stage) {
        if (this.size>OMNI_SIZE_LIMIT){
          throw new Error("[OMNI] Object size exceeded omni limit");
        }
        if (state == "write" && stage == 1 && input && input.__isProxy){
            var _ret = handleProxyObjs(input);
            if (_ret) return _ret;
          } else if (state == "write" && stage == 2 && input && input.__dynId != null){
            var _ret = handleProxyIds(input.__dynId,input.state, input.nodeId);
            if (_ret) return _ret;
        }
        if (input && input.__isProxy)
              input = input.__target;
        var cons, i, k, output, v, _i, _len,_id;
        switch (typeof input) {
          case "number":
             this.size += 8;
            return input;
          case "string":
            this.size+=input.length*2;
            return input
          case "boolean":
            this.size += 4;
            return input;
          case "symbol":
            if (state == "write") 
              return this.errorHandler(new Error("[OMNI] can't serialize symbols"));
            else return "";
          case "undefined":
            return void 0;
          case "function":
            // if (state == "write") 
            //   return this.errorHandler(new Error("[OMNI] can't serialize functions"));
            if (state == "read") return "__func__source";
          default:
            if (input === null) {
              return null;
            } else {
              if (isDOMInheritedProperty(input)){
                  if (state == "write") 
                    _id = this.assignId(input);
                  __tracer.updateDC();
                  var dom2json = {};
                  dom2json.xpath = createXPathFromElement(input);
                  if (input.__proto__.constructor.name == "HTMLDocument") {
                    // dom2json = domJSON.toJSON(input,{
                    //   deep: false,
                    //   attributes : ['id'],
                    //   domProperties: false,
                    // });
                    if (state == "write")
                      dom2json.document = true;
                  } 
                  if (state == "write") {
                    dom2json.__Omni_id = _id;
                    dom2json.__Omni_type = "DOM";
                  }
                
                  return (dom2json);
              } else if (Util.isArray(input)) {
              if (seen_objs.has(input))
                throw new Error("circular Object error");
              seen_objs.add(input);
              if (state == "write")
                _id = this.assignId(input);
              output = [];
              for (i = _i = 0, _len = input.length; _i < _len; i = ++_i) {
                v = input[i];
                output[i] = this.analyze(v,state,seen_objs,stage);
              }
              seen_objs.delete(input);
              // if (state == "write") 
                // output.push({__Omni_id : _id});
              // output.__Omni_id == input.__Omni_id;
              return output;
            } else { 
                    if (seen_objs.has(input))
                      throw new Error("circular object error");
                    seen_objs.add(input);
                    if (state == "write")
                      _id = this.assignId(input);
                    // input.__Omni_id = _id;
                    // this.processed_inputs.push(input);
                    output = new Object;
                    for (k in input) {
                      v = input[k];
                      if (Object.hasOwnProperty.call(input, k) && k != "__getScope__") {
                        output[k] = this.analyze(v,state,seen_objs,stage);
                      }
                    }
                    seen_objs.delete(input);
                    // if (state == "write") 
                      // output.__Omni_id = _id;
                    cons = Util.functionName(input.constructor);
                    if (cons === "" && !Object.hasOwnProperty.call(input, "constructor_name")) {
                      cons = input.constructor_name;
                    }
                    if (!(cons != null)) {
                      this.errorHandler(new Omni.AnonymousConstructorError(input));
                    }
                    if (cons != null && ( cons.indexOf("CSS")>=0 || cons.indexOf("HTML")>=0))
                        this.errorHandler(new Omni.DOMConstructorError(input))
                    if (cons !== "Object") {
                      if (state == "write") {
                        output.__Omni_cons = cons;
                        if (cons == "Function") {
                          /*If serializing function, store the function body*/
                          if (isNative(input))
                            return this.errorHandler(new Error("[OMNI] can't serialize native functions"));
                          output.__body__ = input.toString()
                          output.__scope__ = exposeClosureScope(input, this, seen_objs);
                          if (output.__scope__ && output.__scope__.stack)
                            throw new Error("Closure scope could not be exposed");
                        }
                      } else {
                        switch (cons){
                          case "Map": output =  Array.from(input.entries()); break;
                          case "Set": output =  Array.from(input.values()); break;
                          case "RegExp": output =  input.source; break;
                        }
                      }
                    }
                    // if (input.hasOwnProperty("version")) {
                    //   this.errorHandler(new Omni.VersionInstancePropertyError(input));
                    // }
                    // if (input.version != null) {
                    //   output.version = input.version;
                    // }
                    return output;
                }
            }
        }
      };

      Omni.prototype.setErrorHandler = function(errorHandler) {
        this.errorHandler = errorHandler;
      };

      Omni._refMatcher = /__Omni_ref_(.*)/;

      Omni.prototype.parse = function(input, params) {
        try {
          var l, o,_o, obj, obj_key, ref_id, reference, _i, _len, _ref;
          this.identified_objects = [];
          this.references_to_resolve = [];
          try {
           _o = JSON.parse(input);
         } catch (e){
            return input;
         }
          o = this.fixTree(_o,params);
          if (Util.isArray(o) || ((o != null) && typeof o === "object") && !_o.__Omni_type) {
            l = o.length;
            if (o != null) {
              _ref = this.references_to_resolve;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                reference = _ref[_i];
                obj = reference[0], obj_key = reference[1], ref_id = reference[2];
                // obj[obj_key] = this.identified_objects[ref_id];
                obj[obj_key] = idToObject.get(ref_id);
              }
              // this.clean(o);
            }
          }
          return o;
        } catch (e){
          throw e;
        }
      };

      Omni.prototype.fixTree = function(obj,params) {
        var k, k2, m, proto, t, tmp, v, v2, _i, _len;
        if (obj && obj.__Omni_id) {
            var corObj = idToObject.get(Util.h2d(obj.__Omni_id));
            if (corObj)
                return corObj;
        }

        if (params && obj && obj.__dynPath){
          var obj = __tracer.traversePath(obj.__dynPath,params);
          return obj;
        }

        if (obj && obj.__Omni_type == "DOM"){
          if (obj.document)
            return document;
          // var o = domJSON.toDOM(obj);
          var o = lookupElementByXPath(obj.xpath);
          if (!o){
            this.errorHandler(new Omni.DOMXMLPathError(obj));
          }
          // idToObject.set(Util.h2d(obj.__Omni_id), o);
          return o;
        }

        if (Util.isArray(obj)) {
            // if (obj[obj.length - 1].__Omni_id){
            //     var _id = obj[obj.length - 1].__Omni_id;
            //     var corObj = idToObject.get(Util.h2d(_id));
            //     if (corObj)
            //         return corObj;
            //     else {
            //         idToObject.set(Util.h2d(_id), obj);
            //     }
            //     obj.pop();
            // }
          for (k = _i = 0, _len = obj.length; _i < _len; k = ++_i) {
            v = obj[k];
            v = this.fixTree(v,params);
            if (v === "__Omni_undef") {
              obj[k] = void 0;
            /*} else if (typeof v === "string" && (m = v.match(Omni._refMatcher))) {
              k2 = Util.h2d(m[1]);
              this.references_to_resolve.push([obj, k, k2]);
            } else if ( (k == _len -1) && v.__Omni_id) {
                idToObject.set(Util.h2d(v.__Omni_id), obj);
            */} else {
              obj[k] = v;
            }
          }
        } else if (obj === "__Omni_undef") {
          obj = void 0;
        } else if ((obj != null) && typeof obj === "object") {
          __id = obj.__Omni_id;
          if (obj && (obj.__Omni_cons != null)) {
            proto = this.resolvePrototype(obj.__Omni_cons);
            if (proto != null) {
              if (Util.supportsProto) {
                if (obj.__Omni_cons != "Function")
                  t = new proto;
                else {
                  var body = obj.__body__;
                  var scopeObj = __tracer.omni.parse(obj.__scope__);
                  with (scopeObj){
                    // t = new Function(' return ' + body)()
                    eval("t=" + body);
                  }
                }
                for (k in obj) {
                  v = obj[k];
                  if (obj.hasOwnProperty(k) && k != "__Omni_cons" && k != "__body__" 
                    && k != "__scope__") {
                    t[k] = v;
                  }
                }
                // idToObject.set(Util.h2d(obj.__Omni_id), t);
                obj = t;
              }
            } else {
              this.errorHandler(new Omni.PrototypeNotFoundError(obj, obj.__Omni_cons));
            }
          }
          for (k in obj) {
            v = obj[k];
            if (obj.hasOwnProperty(k)) {
              v = this.fixTree(v,params);
              if (k === "__Omni_id") {
                v2 = Util.h2d(v);
                // this.identified_objects[v2] = obj;
                // idToObject.set(v2, obj);
              } else if (v === "__Omni_undef") {
                obj[k] = void 0;
              } else if (typeof v === "string" && (m = v.match(Omni._refMatcher))) {
                k2 = Util.h2d(m[1]);
                this.references_to_resolve.push([obj, k, k2]);
              } else {
                obj[k] = v;
              }
            }
          }
        // idToObject.set(Util.h2d(__id), obj);
        } else if (typeof obj == "string")
            return (obj);
        return obj;
      };

      Omni.prototype.resolvePrototype = function(cons_id) {
        if (!(this.resolver != null)) {
          throw new Error("No Omni resolver found -- you should specify one in the Omni constructor!");
        }
        return this.resolver.resolve(cons_id);
      };

      Omni.prototype.clean = function(o, cleaned) {
        var i, k, migrations, num, v, _i, _j, _len, _ref, _ref1;
        // if (cleaned == null) {
        //   cleaned = [];
        // }
        if (o === null || typeof o !== "object") {
          return true;
        }
        // if (!Util.isArray(o) && cleaned.indexOf(o) > -1) {
        //   return true;
        // }
        /*migrations = this.migrations[o.__Omni_cons];
        if ((o.version != null) && (migrations != null) && o.version < migrations.length) {
          for (num = _i = _ref = o.version, _ref1 = migrations.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; num = _ref <= _ref1 ? ++_i : --_i) {
            migrations[num].call(o);
          }
          // delete o.version;
        }*/

        if (o && o.__Omni_type){
          delete o.__Omni_type;
          return;
        }

        // cleaned.push(o);
        if (Util.isArray(o)) {
          // if (o.find(el=>el.__Omni_id))
          //   o.pop();
          for (_j = 0, _len = o.length; _j < _len; _j++) {
            i = o[_j];
            this.clean(i);
          }
        } else {
          for (k of Object.getOwnPropertyNames(o)) {
            v = o[k];
            if (k === "__Omni_id" || k === "__Omni_cons" || k == "__body__") {
              delete o[k];
            } else {
              this.clean(v);
            }
          }
        }
        return true;
      };

      Omni.prototype.migration = function(klass, index, callback) {
        var all_versions;
        switch (typeof klass) {
          case "function":
            klass = klass.name;
            if (klass === "") {
              this.errorHandler(new Omni.AnonymousConstructorError(klass));
            }
            break;
          case "string":
            null;

            break;
          default:
            throw new Error("invalid class passed in; pass a function or a string");
        }
        all_versions = this.migrations[klass];
        if (!(all_versions != null)) {
          all_versions = this.migrations[klass] = [];
        }
        all_versions[index - 1] = callback;
        return true;
      };

      return Omni;

    })();
    Resolver = (function() {

      Resolver.name = 'Resolver';

      function Resolver() {}

      Resolver.prototype.resolve = function(cons_id) {
        throw new Error("abstract");
      };

      return Resolver;

    })();
    ContextResolver = (function(_super) {

      __extends(ContextResolver, _super);

      ContextResolver.name = 'ContextResolver';

      function ContextResolver(context) {
        this.context = context;
      }

      ContextResolver.prototype.resolve = function(cons_id) {
        var v;
        v = this.context[cons_id];
        if (v != null) {
          return v;
        } else {
          return null;
        }
      };

      return ContextResolver;

    })(Resolver);
    MultiResolver = (function(_super) {

      __extends(MultiResolver, _super);

      MultiResolver.name = 'MultiResolver';

      function MultiResolver(resolvers) {
        this.resolvers = resolvers != null ? resolvers : [];
      }

      MultiResolver.prototype.resolve = function(cons_id) {
        var proto, res, _i, _len, _ref;
        _ref = this.resolvers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          res = _ref[_i];
          proto = res.resolve(cons_id);
          if (proto != null) {
            return proto;
          }
        }
        return null;
      };

      return MultiResolver;

    })(Resolver);
    Omni.Util = Util;
    Omni.Resolver = Resolver;
    Omni.ContextResolver = ContextResolver;
    Omni.MultiResolver = MultiResolver;
    return Omni;
  });

}).call(this);
/*
 * Copyright (c) 2012 Massachusetts Institute of Technology, Adobe Systems
 * Incorporated, and other contributors. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

/*
The source of source-map is included below on the line beginning with "var sourceMap",
and its license is as follows:

Copyright (c) 2009-2011, Mozilla Foundation and contributors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the names of the Mozilla Foundation nor the names of project
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED T, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
Keywords to manage code base better

TODO - code sections need to be reimplemented or handled better
SUPPRESS - caught exceptions which our suppressed - need to be handled better
LOG - log statements which are used to debug

TODO

    - Fine tracking of arguments
        - Instead of stringifying the entire argument object, only track object level changes (read, write) to the individual object
    - Signature Propagation
        - While trying to build the call graph, some nodes are not found: Is it because I am deleting nodes while stringifying?
*/

if (typeof window != "undefined"){
    if (typeof window.top.setupStateTime == "undefined") {
        window.top.setupStateTime = {};
        window.top.setupStateCounter=0;
    }
}

if (typeof window.__tracer === 'undefined') {
__tracer = new __declTracerObject__(window);
function __declTracerObject__(window) {
    var setupStateStartTime = performance.now();
    var e2eTesting = false;
    var trackOnlyLeaf = false;
    var functions = new Set();
    var invocations = {};
    var customLocalStorage = {}; /* Use this in place of the localstorage API for faster access. */
    var counter = 0;
    var shadowStack = [];
    var _shadowStackHead;
    var processedSignature = {};
    var callGraph = {};
    var parentNodes = [];
    var nonLeafNodes = [];
    var functionsSeen = [];
    var pageRecorded = false;
    var simpleReplay = true;
    var cacheStats = {hits: [], misses: {error:[], empty:[], mismatch:[]}};
    var functionStats = {noarg:[], prim: [], prim_objects:[], function: []};
    var nonCacheableNodes = {};
    var invocationsIndName = {};
    var invocationsIndState = {};
    var invocationToArgProxy = {};
    var invocationToThisProxy = {}
    var invocationToClosureProxy = {};
    var keysToStdKeys = {};
    var cacheableSignature = {};
    var pageLoaded = true;;
    var oldPageLoaded = [];
    var INVOCATION_LIMIT = 5000000;;
    var domCounter =0;
    var invocationToWrites = {};
    var ND = [];
    var curRoot = null;
    var functionToScopes = {};
    var omniStringifier = Omni ? new Omni() : "";
    // var parse = omniStringifier.parse;
    var rootInvocs = [];
    var sigSizeLimit = 500; // Number of reads and writes allowed per invocations
    var OMNI_SIZE_LIMIT=10000; //Length of string allowed to be read or written
    var instrumentationPattern = "cg";
    var invocationList = [];
    var timingInfo = {};
    var sigSizes = {};
    var PMD = {};
    var runtimeInfo = {runtimeInfo};
    var runTimePurged = 0;
    var writeStateProcessed = new Map();

    /*
    For efficient recording, constraint the size of certain objects
    - signature length should be less than 50 entries
    - during stringification the object length should be less than certain bytes*TODO
    */

    window.objStrCount = {
        argument_reads:0,
        argument_writes:0,
        closure_reads:0,
        closure_writes:0,
        global_writes:0,
        global_reads:0,
        this_reads:0,
        this_writes:0
    };

    //Define all your custom methods, before they are overwritten
    //by user javascript
    // Declare all the custom prototype methods here
    var customMethods = {getOwnPropertyDescriptor: Object.getOwnPropertyDescriptor, getOwnProperyNames: Object.getOwnProperyNames, ownKeys: Reflect.ownKeys}

    //temporary hack to store non stringifiable functions
    // var nodesByProperties = {
    //     "NOGSNOARG":[], "GS_f":[], "GS":[],
    //     "Function":{}, "RTI":{RTI},
    //     "antiLocal":{antiLocal},"ND":{ND}, "DOM":{DOM}
    // };

    var eraseCookies = function () {
        var cookies = document.cookie.split("; ");
        for (var c = 0; c < cookies.length; c++) {
            var d = window.location.hostname.split(".");
            while (d.length > 0) {
                var cookieBase = encodeURIComponent(cookies[c].split(";")[0].split("=")[0]) + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=' + d.join('.') + ' ;path=';
                var p = location.pathname.split('/');
                document.cookie = cookieBase + '/';
                while (p.length > 0) {
                    document.cookie = cookieBase + p.join('/');
                    p.pop();
                };
                d.shift();
            }
        }
    }

    var fnCacheExists = false;
    try {
        if (fnCacheExists = localStorage.getItem("fnCacheExists")){
            console.log("Fn cache exists, skippping function executions..");
            keysToStdKeys = JSON.parse(localStorage.getItem("keyMap"));

            var _processedSignature = JSON.parse(localStorage.getItem("signature"));
            Object.keys(_processedSignature).forEach((key)=>{
                processedSignature[key] = JSON.parse(_processedSignature[key], true);
            })
            console.log("Function signatures loaded..");
            pageLoaded = true;

            //Restore cookies
            eraseCookies();
            var prevCookie = localStorage.getItem("cookieVal");
            document.cookie = prevCookie;
        } else {
            localStorage.setItem("cookieVal",document.cookie);
        }
    } catch (e){
        console.error("error while reading local storage " + e);
    }

    window.addEventListener("load", function(){
        if (!pageRecorded) {
            console.log("PROXY STATS");
            console.log(window.proxyReadCount, window.proxyWriteCount);
            /*Delete performance shims since we need all the entries now
            However only do this when the top level page fires
            Some iframe with a sep*/
            // delete window.performance.getEntries
            // delete window.performance.getEntriesByType
        } else {
            console.log("Page successfully replayed");
        }
        // if (window.top == window)
        //     debugger;
        // if (instrumentationPattern == "replay")
        //     debugger;

    })

    var processFinalSignature = function(){
        // First process the global state of every function
        var proxyPrivates = globalProxyHandler.accessToPrivates();
        // Process the signature to construct meaningful paths
        var sigProcessor = new SignatureProcessor(customLocalStorage, proxyPrivates.ObjectTree, callGraph, "global");
        sigProcessor.process();
        // sigProcessor.postProcess();
        // sigProcessor.signaturePropogate();
        processedSignature = sigProcessor.processedSig;

        Object.keys(customLocalStorage).forEach((invocationId)=>{
            var invocationSignature = {};
            invocationSignature[invocationId] = processedSignature[invocationId];
            if (!invocationSignature[invocationId]) return;
            //For each invocation get all the scopes it touches
            functionToScopes[invocationId] && functionToScopes[invocationId].forEach((i_scope)=>{
                var closureProxyHandler = invocationToClosureProxy[i_scope];
                var proxyPrivates = closureProxyHandler.accessToPrivates();
                var sigProcessor = new SignatureProcessor(invocationSignature, proxyPrivates.ObjectTree, callGraph, `closure_${i_scope}`);
                sigProcessor.process();
                // sigProcessor.postProcess();
                processedSignature[invocationId] = sigProcessor.processedSig[invocationId];
            })
        })

        //Now individual iterate the invocations and convert object ids to strings
        // Object.keys(invocationToArgProxy).forEach((invocationId)=>{
        //      // Return if not leaf node
        //     if (trackOnlyLeaf &&  callGraph[invocationId].length) {
        //         nonCacheableNodes[invocationId] = "non-leaf";
        //         return;
        //     }
        //     if (invocationId in nonCacheableNodes) return;
        //     var argProxyHandler = invocationToArgProxy[invocationId];
        //     var proxyPrivates = argProxyHandler.accessToPrivates();
        //     var invocationSignature = {};
        //     invocationSignature[invocationId] = processedSignature[invocationId];
        //     if (!invocationSignature[invocationId]) return;
        //     var sigProcessor = new SignatureProcessor(invocationSignature, proxyPrivates.ObjectTree, callGraph, "argument");
        //     sigProcessor.process();
        //     // sigProcessor.postProcess();
        //     processedSignature[invocationId] = sigProcessor.processedSig[invocationId];
        // })

        // Object.keys(invocationToThisProxy).forEach((invocationId)=>{
        //     // Return if not leaf node
        //     if (trackOnlyLeaf && callGraph[invocationId].length) return;
        //     if (invocationId in nonCacheableNodes) return;
        //     var thisProxyHandler = invocationToThisProxy[invocationId];
        //     var proxyPrivates = thisProxyHandler.accessToPrivates();
        //     var invocationSignature = {};
        //     invocationSignature[invocationId] = processedSignature[invocationId];
        //     if (!invocationSignature[invocationId]) return;
        //     var sigProcessor = new SignatureProcessor(invocationSignature, proxyPrivates.ObjectTree, callGraph, "this");
        //     sigProcessor.process();
        //     // sigProcessor.postProcess();
        //     processedSignature[invocationId] = sigProcessor.processedSig[invocationId];
        // })

        // Object.keys(invocationToClosureProxy).forEach((invocationId)=>{
        //     // Return if not leaf node
        //     if (trackOnlyLeaf && callGraph[invocationId].length) return;
        //     if (invocationId in nonCacheableNodes) return;
        //     var closureProxyHandler = invocationToClosureProxy[invocationId];
        //     var proxyPrivates = closureProxyHandler.accessToPrivates();
        //     var invocationSignature = {};
        //     invocationSignature[invocationId] = processedSignature[invocationId];
        //     if (!invocationSignature[invocationId]) return;
        //     var sigProcessor = new SignatureProcessor(invocationSignature, proxyPrivates.ObjectTree, callGraph, "closure");
        //     sigProcessor.process();
        //     // sigProcessor.postProcess();
        //     processedSignature[invocationId] = sigProcessor.processedSig[invocationId];
        // })

        // constructCacheReadKey();

        console.log("Done processing final signature\nStarting propagation...\n")

        //garbage cleaning
        // delete invocationToArgProxy;
        // delete globalProxyHandler;
        delete customLocalStorage;
        // delete invocationToClosureProxy;

        // sigProcessor.setPropagationData(PMD, {i2a:invocationToArgProxy, i2c:invocationToClosureProxy
        //     ,i2t: invocationToThisProxy, gph:globalProxyHandler}, processedSignature, nonCacheableNodes);
        // sigProcessor.signaturePropagate()

        console.log("Done propagating signatures..\nPurging expensive signatures");
        // purgeExpensiveSignatures();

    }


    var purgeExpensiveSignatures = function(){
        var topNodeInfo = runtimeInfo.filter(e=>e[2]>=0);
        var topNodes = topNodeInfo.map(e=>e[0]);
        var PERBYTEOVERHEAD = 1; //microsecond
        var node2invocations = {}, perInvocationTime = {};
        Object.keys(processedSignature).forEach((invoc)=>{
            var [n,count] = invoc.split("_count");
            if ( !(n in node2invocations) )
                node2invocations[n] = [];
            node2invocations[n].push(invoc);
        })

        topNodes.forEach((tN,ind)=>{
            var invocs = node2invocations[tN];
            if (!invocs){
                //the function never got instrumented for some reason
                return;
            }
            perInvocationTime[tN] = topNodeInfo[ind][2]*1000/invocs.length; //convert to microseconds
            invocs.forEach((i)=>{
                var sig = processedSignature[i];
                var sigSize = sig.reduce((acc, cur)=>{
                        var len =0;
                        if (typeof cur[1] == "string")
                            len += cur[1].length
                        if (cur[2] && typeof cur[2] == "string")
                            len += cur[2].length;
                        return len + acc},0);
                var predictedTime = PERBYTEOVERHEAD*sigSize;
                if (predictedTime > perInvocationTime[tN]){
                    runTimePurged += perInvocationTime[tN];
                    delete processedSignature[i];
                }
            })
        })
    }

    var _constructCacheReadKey = function(signature){
        var readString = "";
        // var readKeys = Object.keys(signature).filter(e=>e.indexOf("reads")>=0);
        var readKeys = [...new Set(signature.filter(e=>e[0].indexOf("reads")>0).map(e=>e[0]))];

        var constructReadKey = function(root, readArr){
            var key = "[`", props=readArr[1].split(";;;;"), value = readArr[2];
            props.forEach((p, ind)=>{
                if (ind === 0) return;
                key += p + "`]";
                if (ind != props.length-1) key +="[`"
            })
            //Special case window read
            if (readArr[0].indexOf(readArr[1])>=0){
                return "JSON.stringify(" + root + key + ") == " + ((root + key).split("[`self")[0]);
            }
            return "JSON.stringify(" + root + key + ") == " + value;
        }

        readKeys.forEach((readType,ind) =>{
            var _type = readType.split("_")[0];
            var root = "";
            switch(_type){
                case "argument":
                    root = "arg";
                    break;
                case "closure":
                    root = "closure";
                    break;
                case "this":
                    root = "thisObj";
                    break;
                case "global":
                    root = "window";
                    break;
            }
            signature.filter(e=>e[0]==readType).forEach((readArr,ind)=>{
                var r = constructReadKey(root, readArr);
                readString += r + " && ";
            })

        })

        return readString + " true";
    }

    var constructCacheReadKey = function(){
        Object.keys(processedSignature).forEach((invocId)=>{
            if (invocId in nonCacheableNodes) return;
            processedSignature[invocId].push(["finalRead", _constructCacheReadKey(processedSignature[invocId])]);
        })
    }

    var combineMultiSigs = function(sig, keyMap){
        var prevSig = JSON.parse(localStorage.getItem("signature"));
        var prevKeyMap = JSON.parse(localStorage.getItem("keyMap"));

        Object.keys(prevSig).forEach((key)=>{
            sig[key] = prevSig[key];
        })
        Object.keys(prevKeyMap).forEach((key)=>{
            keyMap[key] = prevKeyMap[key];
        })

    }

    var createSigProcWorker = function(procSig){
        var WORKERLIMIT = 8, workerList = [], workloads = [], len=Object.keys(procSig).length;
        var workloadSize = Math.floor(len/WORKERLIMIT), workerId=1;
        if (!workloadSize) {
            workloadSize = len, WORKERLIMIT=1;
        }
        console.log("Preparing data for workers...");
        for (var i=0;i<WORKERLIMIT*workloadSize;i+=workloadSize){
            var _wl = {}, _wlkeys;
            if ( i + workloadSize < WORKERLIMIT*workloadSize)
                _wlkeys = Object.keys(procSig).slice(i,i+workloadSize);
            else _wlkeys = Object.keys(procSig).slice(i, len);
            _wlkeys.forEach((k)=>{
                _wl[k] = procSig[k];
            })
            workloads.push(_wl);

            var worker  = new Worker("http://goelayu4929.eecs.umich.edu:99/hostSrc/signatureWorker.js");
            worker.addEventListener('message', function(e){
                var _id = workerId++;
                console.log("Data processed by worker " + _id);
                Object.keys(e.data.keymap).forEach((k)=>{
                    keysToStdKeys[k] = e.data.keymap[k];
                })
                // keysToStdKeys = keysToStdKeys.concat(e.data.keymap);
                Object.keys(e.data.sig).forEach((k)=>{
                    cacheableSignature[k] = e.data.sig[k];
                })

                if (_id == WORKERLIMIT){

                    var cacheExists = localStorage.getItem("fnCacheExists");
                    if (cacheExists){
                        combineMultiSigs(cacheableSignature, keysToStdKeys);
                    }
                    //Store the signature in local storage
                    localStorage.setItem("signature", JSON.stringify(cacheableSignature));
                    //store the uniq keys map
                    localStorage.setItem("keyMap", JSON.stringify(keysToStdKeys));
                    //store a small key to check whether a signature is available or not
                    localStorage.setItem("fnCacheExists",1);

                    //only the top window object should send the final alert
                    if (window.top == window)
                        console.log("Cache saved..");
                }
            })
            workerList.push(worker);
        }
        console.log("Data prepared, launching workers");
        workerList.forEach((w,i)=>{
            w.postMessage(workloads[i]);
        });


    }

    var storeSignature = function(){
        var strSignature = {};
        Object.keys(processedSignature).forEach((invocId)=>{
            if (invocId in nonCacheableNodes) return;
            processedSignature[invocId].IBF && (processedSignature[invocId].push(["IBF"].concat(processedSignature[invocId].IBF)) );
            (processedSignature[invocId].returnValue != null) && (processedSignature[invocId].push(["returnValue"].concat(processedSignature[invocId].returnValue)) );
            var strSig = JSON.stringify(processedSignature[invocId]);
            if (strSig && strSig instanceof Error) {
                nonCacheableNodes[invocId] = strSig.message;
                return;
            }
            else if (processedSignature[invocId] == "NonLeafNode") return;

            //convert the original signature in the string format, to do a memory comparison
            strSignature[invocId] = strSig;

        })

        createSigProcWorker(strSignature);

        // console.log(Object.keys(processedSignature).length + " coalesced into " + Object.keys(cacheableSignature).length);
    }

    this.storeSignature = storeSignature;

    this.processFinalSignature = processFinalSignature;

    // this.omni = omniStringifier;

    this.getKeysToStdKeys = function(){
        return keysToStdKeys;
    }

    this.getPMD = function(){
        return PMD;
    }

    this.getND = function(){
        return ND;
    }

    this.getCurRoot = function(){
        return curRoot;
    }

    this.addND = function(f){
        ND.push(f);
    }

    this.getRootInvocs = function(){
        return rootInvocs;
    }

    this.getRuntimePurged = function(){
        return runTimePurged;
    }

    this.getStoredSignature = function(){
        return cacheableSignature;
    }

    this.getInvocationToWrites = function(){
        return invocationToWrites;
    }

    var processInvocationProperties = function(){
        //Iterate processed signature instead of customLocalStorage object
        Object.keys(processedSignature).forEach((nodeId)=>{
            var propertyObj = processedSignature[nodeId];
            // if (!propertyObj.reads.length && !propertyObj.writes.length && !propertyObj.argProp) {
            //     // if (nodesByProperties.DOM.indexOf(nodeId)<0 && nodesByProperties.antiLocal.indexOf(nodeId)<0)
            //         nodesByProperties.NOGSNOARG.push(nodeId);
            // } else if ( (propertyObj.reads && propertyObj.reads.length) || ( propertyObj.writes && propertyObj.writes.length) ) {
            //     if (propertyObj.argProp && getFunctionStat(propertyObj.argProp) == "function")
            //         nodesByProperties.GS_f.push(nodeId);
            //     else nodesByProperties.GS.push(nodeId);
            // }
            // else {
            //     var argType = getFunctionStat(propertyObj.argProp);
            //     nodesByProperties.Function[argType].push(nodeId);
            // }
            if (nodesByProperties.antiLocal.indexOf(nodeId) < 0) {
                if (propertyObj.isFunction)
                    nodesByProperties.function.push(nodeId)
                else nodesByProperties.nonFunction.push(nodeId);
            }
        });
    }

    /* Proxy object handler */
    window.proxyReadCount =0; window.proxyWriteCount = 0;

    /*
    Declare your own inbuilt functions
    so that your instrumentation, doesn't end up calling the
    actual user defined code in cases when the user defined code
    has rewritten the in built functions
    */

    window.__tracerEval = window.eval;
    window.__tracerParseInt = window.parseInt;
    window.__tracerParseFloat = window.parseFloat;


    /*
    Rewrite inbuilt javascript APIs
    to support the use of proxy objects.
    Since lots of objects are wrapped in proxy,
    these objects can end up inside function calls outside my instrumented code
    And therefore we need to rewrite these definitions

    However, we don't need to rewrite these definitions during replay, when the page is
    replaying function signature from cache, since there are no proxy objects in memory

    */

    if (!pageLoaded) {


        function customShims(self){
            let _setProtoTypeof = Object.setPrototypeOf;
            self.Object.setPrototypeOf = function (obj, prototype) {
                if (prototype && prototype.__isProxy)
                    prototype = prototype.__target;
                return _setProtoTypeof(obj, prototype);
            }

            var _create = Object.create;
            self.Object.create = function(){
                var thisObj = this;
                for (var i=0;i<arguments.length;i++){
                    var arg = arguments[i];
                    if (arg && arg.__isProxy)
                        arguments[i] = arg.__target;
                }
                if (thisObj && thisObj.__isProxy)
                    thisObj = thisObj.__target;
                return _create.apply(thisObj,arguments);
            }

            var _encodeURI = window.encodeURI;
            self.window.encodeURI = function(uri){
                var _t;
                if (uri && (_t = uri.__target))
                    uri = _t;
                return _encodeURI.call(this, uri);
            }

            var _encodeURIComponent = window.encodeURIComponent;
            self.window.encodeURIComponent = function(uri){
                var _t;
                if (uri && (_t = uri.__target))
                    uri = _t;
                return _encodeURIComponent.call(this, uri);
            };

            var _getComputedStyle = window.getComputedStyle;
            self.window.getComputedStyle = function(){
                var thisObj = this;
                for (var i=0;i<arguments.length;i++){
                    var arg = arguments[i];
                    if (arg && arg.__isProxy)
                        arguments[i] = arg.__target;
                }
                if (thisObj && thisObj.__isProxy)
                    thisObj = thisObj.__target;
                return _getComputedStyle.apply(thisObj,arguments);
            };

            var _defineProperty = Object.defineProperty;
            self.Object.defineProperty = function(){
                for (var i=0;i<arguments.length;i++){
                    var arg = arguments[i];
                    if (arg && arg.value && arg.value.__isProxy)
                        arg.value = arg.value.__target;
                    if (arg && arg.__isProxy)
                        arguments[i] = arg.__target;
                }
                return _defineProperty.apply(this, arguments);
            }

            // var _toString = Object.prototype.toString;
            // self.Object.prototype.toString = function(){
            //     var thisObj = this;
            //     for (var i=0;i<arguments.length;i++){
            //         var arg = arguments[i];
            //         if (arg && arg.__isProxy)
            //             arguments[i] = arg.__target;
            //     }
            //     if (thisObj && thisObj.__isProxy)
            //         thisObj = thisObj.__target;
            //     return _toString.apply(thisObj,arguments);
            // }


            window.___ranCUSTOMSHIMS___ = true;
        };

        customShims(window);

        // --------------------------------------------------
        /***** HORCRUX *****/
        const DOMAccessHandler = {
            get: function(target, property, receiver) {
                if (property == '__isDOMNode') return true;

                const oldValue = Reflect.get(target, property);
                console.log(`called: ${property} on ${target} -> ${oldValue}`);
                return oldValue;
            }
        };

        const createDOMProxy = function(domObject, attachedToDOMTree) {
            if (pageLoaded || _shadowStackHead in nonCacheableNodes) return domObject;
            var nodeId = _shadowStackHead ? _shadowStackHead : null;
            if (!nodeId) {
                console.error('nodeId is null: THIS SHOULD NOT HAPPEN FOR HORCRUX!');
                return domObject;
            }
            if (domObject.__isProxy) {
                console.log('domObj is already a proxy!!');
                domObject = domObject.__target;
            }
            // console.log(`DOM Node: ${domObject}, attached: ${attachedToDOMTree}`);
            var proxyHandler = proxyEncapsulation(domObject, "DOM_NODE", null, attachedToDOMTree);
            var domProxy = new Proxy(domObject, proxyHandler);
            // TODO (Shaghayegh): Test/confirm if I should keep track of created DOM proxies!
            return domProxy;
        }

        // --------------------------------------------------

        /*Creates shim for every dom methods
        The purpose of the shim is to check for proxy argument types*/
        function createShimForDOMMethods(self){
            var HTMLNames = [
                "HTMLDocument", "HTMLLinkElement", "HTMLElement", "HTMLHtmlElement",
                "HTMLDivElement", "HTMLAnchorElement", "HTMLSelectElement",
                "HTMLOptionElement", "HTMLInputElement", "HTMLHeadElement",
                "HTMLSpanElement", "XULElement", "HTMLBodyElement", "HTMLTableElement",
                "HTMLTableCellElement", "HTMLTextAreaElement", "HTMLScriptElement",
                "HTMLAudioElement", "HTMLMediaElement", "HTMLParagraphElement", "DOMImplementation",
                "HTMLButtonElement", "HTMLLIElement", "HTMLUListElement", "HTMLIFrameElement",
                "HTMLFormElement", "HTMLHeadingElement", "HTMLImageElement", "IntersectionObserver",
                "HTMLStyleElement", "HTMLTableRowElement", "HTMLTableSectionElement", "PerformanceObserver",
                "HTMLBRElement", "Node", "EventTarget", "HTMLCollection", "MutationObserver", "Document",
                "HTMLCanvasElement", "CanvasRenderingContext2D", "CanvasGradient", "CanvasPattern",
                "ImageBitMap", "ImageData", "TextMetrics", "Path2D", "CSSCounterStyleRule", "Element",
                "RegExp", "Crypto", "Object", "Map", "MediaDevices","StorageManager","CacheStorage",
                "NodeList", "ChildNode"
            ];

            const DOMReadAPIs = ["getElementById", "getElementsByTagName",
                "getElementsByClassName", "getElementsByTagNameNS",
                "querySelector", "querySelectorAll",
                "compareDocumentPosition", "contains"
            ];

            // TODO: Handle "write", "writeln":
            // Wouldn't be useful to wrap the return value in a proxy, but at least should mark DOM_write
            const DOMWriteAPIs = ["insertBefore",
                "appendChild", "replaceChild", "removeChild", "remove",
                "insertAdjacentElement", "insertAdjacentHTML", "insertAdjacentText"
            ];

            HTMLNames.forEach((_class)=>{
                self[_class] && self[_class].prototype && Object.getOwnPropertyNames(self[_class].prototype).forEach((classKey)=>{
                    try {
                        if (typeof self[_class].prototype[classKey] == "function") {
                            var origMethod = self[_class].prototype[classKey];
                            if (classKey == "constructor") return;
                            self[_class].prototype[classKey] = function() {
                                var thisObj = this;
                                /***** HORCRUX *****/
                                // indicating whether the retVal is a node already attached to DOM tree or not
                                let attachedToDOMTree = false;
                                if (DOMWriteAPIs.includes(origMethod.name)) {
                                    // this object is attached to DOM tree.
                                    // so any changes to it affects the DOM  tree.
                                    if (thisObj && thisObj.__isAttachedToDOMTree) {
                                        customLocalStorage[_shadowStackHead]["DOM_write"] = true;
                                        attachedToDOMTree = true;
                                    }
                                    // TODO: change the corresponding field of arg proxy
                                    // if thisObject is already attached, the given arg is also getting
                                    // attached to the tree after this call
                                }

                                if (DOMReadAPIs.includes(origMethod.name))  {
                                    console.log(_shadowStackHead);
                                    customLocalStorage[_shadowStackHead]["DOM_read"] = true;
                                    attachedToDOMTree = true;
                                }
                                if (thisObj && thisObj.__isProxy)
                                    thisObj = thisObj.__target;
                                for (var i=0; i < arguments.length; i++){
                                    var arg = arguments[i];
                                    if (arg && arg.__isProxy)
                                        arguments[i] = arg.__target;
                                }

                                /*If regex testing, return the original method*/
                                if ( (origMethod.name == "test" || origMethod.name =="exec") && arguments[0] && arguments[0].__isShimmed__)
                                    arguments[0] = arguments[0].__orig__;

                                const retVal = origMethod.apply(thisObj, arguments);
                                /* For methods like "compareDocumentPosition" and "contains"
                                the returned value type is bitmask and boolean, respectively, so
                                it does not need to be wrapped in proxy! */
                                if (retVal && typeof retVal === "object") { //&& retVal.nodeType
                                    return createDOMProxy(retVal, attachedToDOMTree);
                                }
                                return retVal;
                            };
                            self[_class].prototype[classKey].__isShimmed__ = true
                            self[_class].prototype[classKey].__orig__ = origMethod;
                        }
                    } catch (e){};
                });
            });
        };
        createShimForDOMMethods(window);

        this.createShimForDOMMethods = createShimForDOMMethods;
        this.customShims = customShims;

        // Since we are modifying content of scripts, if scripts have dynamically created integrity attribute
        // the script won't be fetch as the hash match would fail, therefore make the integrity field non writable
        Object.defineProperty(HTMLScriptElement.prototype, "integrity",{value:"", writable:false})

        if (Error.captureStackTrace){
            var _captureStackTrace = Error.captureStackTrace;
            Error.captureStackTrace = function(){
                var args = arguments;
                if (args[0] && args[0].__target)
                    args[0] = args[0].__target;
                if (args[1] && args[1].__target)
                    args[1] = args[1].__target;
                return _captureStackTrace.apply(this, args);
            }
        }

        var _xmlSend = XMLHttpRequest.prototype.send;
            // override the native send()
        XMLHttpRequest.prototype.send = function(){
            if (_shadowStackHead){
                nonCacheableNodes[_shadowStackHead] = "xml";
                // console.log("xml request sent from " + _shadowStackHead);
            }
            // call the native send()
            _xmlSend.apply(this, arguments);
        }

        var origSetTimeout = window.setTimeout;
        // window.setTimeout = function(){
        //     if (arguments.length > 1 && !isNaN(Number.parseFloat(arguments[1]))){
        //         if (arguments[1] === 0){
        //             arguments[1] = 500;
        //         }
        //         arguments[1] = arguments[1]*4;
        //     }
        //     var thisArg = this;
        //     if (this && this.__isProxy){
        //         thisArg = this.__target;
        //     }
        //     return origSetTimeout.apply(thisArg, arguments);
        // }


        /*
        This takes care of every inbuild api invocation where
        the argument causes a different behavior due to the proxy wrapping
        for example: Object.prototype.toString.call(o);
        here if o is wrapped in proxy, it will always return object type
        */

        /*Not sure why we need these call exceptions*/
        var callExceptions = [/*"hasOwnProperty","toString","toLocaleString","isPrototypeOf"*/];
        var origCall = Function.prototype.call;
        Function.prototype.call = function() {
            var _t,n = this.__isProxy ? this.__target.name : this.name;
            if (arguments[0] && arguments[0].__isProxy)
                arguments[0] = arguments[0].__target;
            return origCall.apply(this, arguments);
        }
    } else {
        /*
        Even if the page is not loaded, increase the setTimeout value
        This is specially useful for the callgraph generation, where every function is instrumented
        Not needed anymore, since callgraph generation only uses tentative leaf nodes now

        */
        // var origSetTimeout = window.setTimeout;
        // window.setTimeout = function(){
        //     if (arguments.length > 1 && !isNaN(Number.parseFloat(arguments[1]))){
        //         if (arguments[1] === 0){
        //             arguments[1] = 500;
        //         }
        //         arguments[1] = arguments[1]*4;
        //     }
        //     return origSetTimeout.apply(this, arguments);
        // }
    }

    /*Create shim for performance entries so that all the other timers values are not returned*/

    // var _pGetEntries = window.performance.getEntries;
    // window.performance.getEntries = function() {
    //     var entries = _pGetEntries.apply(this, arguments);
    //     var relevantEntries = entries.filter(e=>e.name.indexOf("_count")<0);
    //     return relevantEntries;
    // }

    // var _pGetEntriesByType = window.performance.getEntriesByType;
    // window.performance.getEntriesByType = function(type){
    //     var entries = _pGetEntriesByType.apply(this, arguments);
    //     var relevantEntries = entries.filter(e=>e.name.indexOf("_count")<0);
    //     return relevantEntries;
    // }

    this.isPageLoaded = function(){
            return pageLoaded;
    }

    // use hacks to detect if a method is a DOM object or not
    // as sometimes even document objets are not instances of these parent objects
    // for reasons unknown
    // Despite window satisfying this criteria have this function return false for window
    // object specifically
    // Sometimes Node instances like character data or other nodes don't satisfy the instanceof check
    // therefore use specific methods like click and appendata
    var isDOMInheritedProperty = function(method){
        return method && (method instanceof EventTarget || method instanceof HTMLCollection || method instanceof NodeList || method.readState
            || method.click || method.appendData) &&  !(method instanceof HTMLDocument) /*&& (method && method.self != method)*/
    }

    /*Proxyobj is either a proxy object, or the window object when the this refers to window*/
    var handlePropagatedProxy = function(proxyObj,argInd, transferState, stackHead){
        var state = proxyObj.__isProxy || "global";
        var parentNodeId = proxyObj.__debug, proxyMap;
        switch (state) {
            case "argument" :
                proxyMap = invocationToArgProxy; break;
            case "global" :
                proxyMap = globalProxyHandler; break;
            case "this" :
                proxyMap = invocationToThisProxy; break;
            case "closure":
                proxyMap = invocationToClosureProxy; break;
        }
        var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[parentNodeId];
        if (!proxyPrivates) {
            /*Maybe the parent exists in different iframe*/
            nonCacheableNodes[parentNodeId] = "propagation error | can't store metadata"
            return;
        }
        var objId = proxyObj.__target != null ? proxyPrivates.accessToPrivates().getObjectId(proxyObj.__target) : [0]
        if (objId == null){
            console.error("Error while trying to propagate object from " + stackHead + " to " + parentNodeId);
            nonCacheableNodes[parentNodeId] = "propagation error | can't store metadata"
        }
        PMD[stackHead][transferState].push([argInd,objId[0],state]) // transferState(arguments or this) -> [objId of parent Object, argInd in case the object was passed as a specific index, state (which parent state it belonged to)]
    }

    // closure_id is only applicable when the type is closure
    var proxyEncapsulation =  function(rootObject, type, closure_id, attached) {

        var ObjectTree = {};
        var objectIdCounter = 1;
        var methodToProxy = new WeakMap();
        var proxyToMethod = new WeakMap();
        var ObjectToId = new WeakMap();
        var idToObject = {};
        var objectToPath;
        var parentFunctionId = null;
        var rootType = type;
        if (rootType == "argument" || rootType == "this" || rootType == "closure")
            parentFunctionId = _shadowStackHead;
        /***** HORCRUX *****/
        let isDOMNode = (rootType == "DOM_NODE");
        let attachedToDOMTree = !!attached;
        /* Initialize the object tree with window as the root object*/
        ObjectToId.set(rootObject,0);
        idToObject[0] = rootObject;
        ObjectTree[0] = {};

        var closureScope;
        if (type == "closure"){
            closureScope = `closure_${closure_id}`;
        }

        var appendObjectTree = function(rootId, key, childId){
            var _edge = ObjectTree[rootId];
            if (typeof key == "symbol")
                var ekey = "e_" + key.toString();
            else var ekey = "e_" + key;
            if (_edge) {
                if (!_edge[ekey])
                    _edge[ekey] = [];
                if (_edge[ekey].indexOf(childId)<0)
                    _edge[ekey].push(childId);
            }
            else {
                ObjectTree[rootId]  = {};
                var edge = ObjectTree[rootId];
                edge[ekey] = [];
                edge[ekey].push(childId);
            }
        }

        var stateAlreadyLogged = function(nodeId, logTup, logType){
            var otherLogType = logType.indexOf("reads")>=0 ? rootType+"_writes" : rootType +"_reads";
            var stateLogged = false;
            if (logType.indexOf("reads")>=0){
                //Test whether the value read is written inside the current function itself
                if (customLocalStorage[nodeId][otherLogType]) {
                    customLocalStorage[nodeId][otherLogType].forEach((el)=>{
                        if (el[0] == logTup[0] && el[1] == logTup[1])
                            stateLogged = true;
                    });
                    if (stateLogged) return stateLogged;
                }
            }

            customLocalStorage[nodeId][logType].forEach((tupEntry)=>{
                if (JSON.stringify(tupEntry) == JSON.stringify(logTup))
                    stateLogged = true;
            })
            return stateLogged;
        }

        var hasObjectId = function(obj){
            return ObjectToId.get(obj);
        }

        var getObjectId = function(obj){
            if (obj.__isClosureObj){
                return [0, false];
            }
            var rootId = ObjectToId.get(obj);
            if (rootId != null) return [rootId, false];
            rootId = objectIdCounter;
            objectIdCounter++;
            ObjectToId.set(obj, rootId);
            idToObject[rootId] =  obj;
            return [rootId,true];
        }

        var redundantStateConsumed = ["__isProxy", "top", "parent","toString","toJSON"];

        var loggerFunction = function(target, key, value, logType){
            var retCode = 0;

            var nodeId = _shadowStackHead ? _shadowStackHead : null;

            var stringifier = omniStringifier;
            var state = logType.split("_")[1] == "reads"  ? "read" : "write";
            if ( (!nodeId && logType.indexOf("global")<0 ) || (nodeId &&
                nonCacheableNodes[nodeId]) )
                return 1;

            var rootId = getObjectId(target)[0];

            if (state == "read"){
                if (value && value.__isProxy)
                    value = value.__target;
            }

            // if (logType.indexOf("argument")>=0 || logType.indexOf("this")>=0 || logType.indexOf("closure")>=0)
            //     nodeId = parentFunctionId;

            //This check implies that the function where the proxy is being accessed
            // is different from where it was created
            // therefore, add the log in both function signatures
            var currentObjectTree = null;
            var remoteLogType = "";
            // if (_shadowStackHead != nodeId) {
            //     // console.error("shadow stack head doesn't point to proxy creating head");
            //     //Check how in the current function, it is being accessed: as closure,argument, or this
            //     if ( invocationToArgProxy[_shadowStackHead] ){
            //         var remotePrivates = invocationToArgProxy[_shadowStackHead].accessToPrivates();
            //         if (remotePrivates.hasObjectId(target)) {
            //             currentObjectTree = remotePrivates.getObjectId;
            //             var remoteRootId = currentObjectTree(target);
            //             remoteLogType += "argument_" + logType.split('_')[1];
            //         }
            //     }
            //     if (!currentObjectTree && invocationToClosureProxy[_shadowStackHead]) {
            //         var remotePrivates = invocationToClosureProxy[_shadowStackHead].accessToPrivates();
            //         if (remotePrivates.hasObjectId(target)) {
            //             currentObjectTree = remotePrivates.getObjectId;
            //             var remoteRootId = currentObjectTree(target);
            //             remoteLogType += "closure_" + logType.split('_')[1];
            //         }
            //     }
            //     if (!currentObjectTree && invocationToThisProxy[_shadowStackHead]){
            //         var remotePrivates = invocationToThisProxy[_shadowStackHead].accessToPrivates();
            //         if (remotePrivates.hasObjectId(target)) {
            //             currentObjectTree = remotePrivates.getObjectId;
            //             var remoteRootId = currentObjectTree(target);
            //             remoteLogType += "this_" + logType.split('_')[1];
            //         }
            //     }
            // }

            var childId, childLogStr;
            if ((value instanceof Object) || (typeof value == "object" && value != null) || typeof value == "function") {
                var _childId = getObjectId(value);
                childId = _childId[0];

                // Only add to tree if the value is type object and it is a new object
                _childId[1] && appendObjectTree(rootId, key, childId);
                // if (currentObjectTree) {
                //     var remoteChildId = currentObjectTree(value);
                //     remotePrivates.appendObjectTree(remoteRootId, key, remoteChildId);
                // }

                if ( (logType.indexOf("reads")>=0) && typeof value != "function") {
                    childLogStr = childId;
                }

                if (state == "write"){
                    if (_shadowStackHead && (!value || !value.__isProxy)){
                        if (!invocationToWrites[_shadowStackHead])
                            invocationToWrites[_shadowStackHead] = []
                        invocationToWrites[_shadowStackHead].push(["broken-reference", childId ]);
                    }
                }
            }

            if (redundantStateConsumed.indexOf(key)>=0 || typeof key == "symbol")
                return 0;

            //HACK
            if (state == "write" && logType.indexOf("argument")>=0 && rootId === 0
                && value === null)
                return;


            // The only time when not having a nodeId is allowed, is when the logger function is closed for a
            // global read or write. However since the nodeId is not there, we won't be adding to any signature
            //only appending the object in the tree.
            //update: reads are important even when the value is undefined
            if (!nodeId ||  (_shadowStackHead != nodeId)) return 0;

            //if the value is the window object itself, log a special signature
            if (value && value.self == value) {
                customLocalStorage[nodeId].push([logType, rootId, key, childLogStr,0 ]);
                return 0;
            }

            // if (customLocalStorage[nodeId].length > sigSizeLimit){
            //     nonCacheableNodes[nodeId] = "signature size exceeds limit";
            // }


            // Doesn't make sense to log function reads, as I currently don't have a correct way of stringifying them
            if (!customLocalStorage[nodeId][logType])
                customLocalStorage[nodeId][logType]=[];
            if (logType.indexOf("reads")>=0) {
                if (logType.indexOf('closure') >=0 ) {
                    logType = `${closureScope}_reads`;
                    childLogStr = stringifier.stringify(value, state, 1);
                    if (childLogStr && childLogStr instanceof Error){
                        nonCacheableNodes[nodeId] = childLogStr.message;
                        return 1;
                    }
                    console.log(`---closure_reads value: ${childLogStr}---`);
                }
                var log = [logType, rootId, key, childLogStr, childId];
                customLocalStorage[nodeId].readKeys.add(logType);
                customLocalStorage[nodeId].push(log);
                // customLocalStorage[nodeId][logType].push(log);
            } else {
                if (logType.indexOf('closure')>=0)
                    logType = `${closureScope}_writes`;
                customLocalStorage[nodeId].writeKeys.add(logType);
                var log = [logType, rootId, key, childLogStr ];
                customLocalStorage[nodeId].push(log);
                // customLocalStorage[nodeId][logType].push(log);
                // if (customLocalStorage[nodeId].filter(e=>e[0].indexOf("reads")>=0 && e[3] === rootId).length)
                //     freezeReadState(nodeId);
            }
            return 0;
        }


        var _handleSymbolKey = function(target, key){
            if (!Reflect.get(target, key)){
                switch (key.toString()){
                    case 'Symbol(Symbol.toPrimitive)':
                        if (+target) return +target;
                        if (''+target) return ''+target;
                }
            }
        }

        var handleNonConfigurableProperty = function(target, key){
            var method = Reflect.get(target,key);
            // if (typeof method == "function")
            //     method = method.bind
            // if (_shadowStackHead)
            //     nonCacheableNodes[_shadowStackHead] = "non-configurable;" + key;
             return method;
        }

        var handleMetaProperties = function(target, key){
            switch(key){
                case 'apply' :
                    return Reflect.get(target, key);
                    break;
                case 'call':
                    return Reflect.get(target, key);
                    break;
                case 'bind':
                    return Reflect.get(target, key);
                    break;
            }
        }

        /*You can set the prototype of an object, there fore you need to track changes to prototype*/
        var outOfScopeProperties = [/*"location", "body", */"Promise", "top", "parent", "__proto__", "self",
        "getRegistration","digest", "query","getBattery"];

        var specialSetKets = ["prototype", "constructor","__proto__"];

        var applyTargetSpcl = ["RegExp", "DOMTokenList", "Performance", "CSSStyleDeclaration" ,"FontFace","Storage","String"];

        var nonConfigurableOnly = ["window"];

        var isWindow = function(obj,cors){
            if (obj && obj.self == obj){
                try{
                    if (obj.__isProxy) return obj;
                    var proxyPrivates = globalProxyHandler.accessToPrivates();
                    var _proxyMethod = proxyPrivates.methodToProxy.get(obj);
                    if (_proxyMethod) return _proxyMethod;
                    var proxyMethod = new Proxy(obj, handler);
                    proxyPrivates.methodToProxy.set(obj, proxyMethod);
                    return proxyMethod;
                } catch (e){
                    cors.v = true;
                    return obj;
                }
            }
        }

        // function isArguments( item ) {
        //     if (item && item.__isProxy)
        //         item = item.__target;
        //     return Object.prototype.toString.call( item ) === '[object Arguments]';
        // }

        function isArguments(thisArg, target){
            if (thisArg && thisArg.__target)
                thisArg = thisArg.__target;

            if (!thisArg.length) return false;


            return Array.from(thisArg).indexOf(target)>=0;
        }

        var handler = {
          get(target, key, receiver) {

            if (key == "__isProxy") return rootType;
            if (key == "__target") return target;
            if (key == "__debug") return parentFunctionId;
            if (key == "__isClosureObj") return target[key];
            /***** HORCRUX *****/
            if (key == "__isDOMNode") return isDOMNode;
            if (key == "__isAttachedToDOMTree") return attachedToDOMTree;

            var method = Reflect.get(target,key);

            /*Overwrites the custom toJson implementation, which might be doing something else
            instead of simply returning the original object*/
            if (key == "toJSON") return method;

            if (outOfScopeProperties.includes(key)) return method;
            var desc = customMethods.getOwnPropertyDescriptor(target, key);
            if (desc && desc.configurable == false && desc.writable == false/*&& nonConfigurableOnly.indexOf(key)>=0*/) {
                return handleNonConfigurableProperty(target, key);
            }
            // var isWinObj,cors={};
            // if (isWinObj = isWindow(method,cors)){
            //     // if (!cors.v) loggerFunction(target, key, method, rootType+"_reads");
            //     return isWinObj;
            // }

            /***** HORCRUX *****/
            /* Added the condition to filter out the reads related to local DOM nodes! */
            if (rootType != "DOM_NODE")
                _ret = loggerFunction(target, key, method, rootType + "_reads");

            if (method && method.__isProxy) {
                // if (rootType == "global" || method.__isProxy == "global")
                //     return method;

                // method = method.__target;
                // Sometimes the toString method doesn't exist on certain objects
                if (Object.prototype.toString.call(target).indexOf("Arguments")>=0 && _shadowStackHead)
                    handlePropagatedProxy(method,key, "argument",_shadowStackHead)
                method = method.__target
                //     return method;
                //     var actualMethod = method.__target;
                //     var childId = getObjectId(actualMethod);
                //     appendObjectTree(0, key, childId, ObjectTree);
                // } else if (target.__isClosureProxy) {
                //     var actualMethod = method.__target;
                //     var childId = getObjectId(actualMethod);
                //     appendObjectTree(0, key, childId, ObjectTree);

                // return method;
            }
            /* If method type if function, don't wrap in proxy for now */
            if (method && (typeof method === 'object' || typeof method === "function") && !outOfScopeProperties.includes(key)) {
                // if (isDOMInheritedProperty(method)) {
                // if (_shadowStackHead)
                //     nonCacheableNodes[_shadowStackHead] = "DOM";
                // return method;
                // }
              var desc = customMethods.getOwnPropertyDescriptor(target, key);
              if (desc && ! desc.configurable && !desc.writable) return handleNonConfigurableProperty(target, key);
              window.proxyReadCount++;
              // if (window.proxyReadCount % 1000000 == 0)
              //   alert("window.Proxyreadcount is " + window.proxyReadCount);
              // if (typeof method == "function") {
              //   var _method = method._bind(target);
              //   Object.setPrototypeOf(_method, method);
              //   if (!isNative(method))
              //       Object.assign(_method, method);
              //   return new Proxy(_method,);
              // }
              /*
              The following check is kind of inconsequental, cause even if you have a proxy around the method call or apply, the apply handler
              will be anyway called
              */
              if (key == "apply" || key == "call") return method;
              // console.log("Calling get of " + key + " and setting this to ");
              // console.log(target);
              var _proxyMethod = methodToProxy.get(method);
              if (_proxyMethod) return _proxyMethod;
                /***** HORCRUX *****/
                /* Example: if target is a DOM collection and key is an index
                returned element should also be a DOM node -- set isDOMNode and attachedToDOMTree
                */
                if (receiver.__isDOMNode && receiver.__isAttachedToDOMTree) {
                    customLocalStorage[_shadowStackHead]["DOM_read"] = true;
                    // TODO (Shaghayegh)? I'm not sure if I have to add this to the DOM map and if type DOM_NODE is ok
                    // test this with local variables
                    // var proxyHandler = proxyEncapsulation(method, "DOM_NODE", null, attachedToDOMTree);
                    // proxyMethod = new Proxy(method, proxyHandler);
                }
              // var proxyHandler = rootType == "global"  ? handler : _shadowStackHead ? invocationToProxy[_shadowStackHead][1] : handler;
              var proxyMethod = new Proxy(method, handler);
              methodToProxy.set(method, proxyMethod);
              return proxyMethod;
            } else {
              return method;
            }
          },
          set(target, key, value, receiver) {
            var cors={}, method;
            /***** HORCRUX *****/
            /* Added the second condition: filter out the writes related to local DOM nodes! */
            if (!isWindow(value, cors) && rootType != "DOM_NODE")
                loggerFunction(target, key, value, rootType + "_writes");
            window.proxyWriteCount++;
            if (specialSetKets.indexOf(key)>=0 && value && value.__isProxy){
                value = value.__target;
                return Reflect.set(target, key, value);
            }
            /* Example: if node is a global var, we want to capture: node.textContent = "..." */
            if (receiver.__isDOMNode && receiver.__isAttachedToDOMTree) {
                // console.log(`Updating the value of ${key} for an attached DOM node (${target.nodeName})!`);
                customLocalStorage[_shadowStackHead]["DOM_write"] = true;
            }
            /*The final value set should always be the actual value*/
            if (value && value.__isProxy) {
                // TODO (Shaghayegh):
                if (value.__isDOMNode) {
                    attachedToDOMTree = value.__isAttachedToDOMTree;
                    isDOMNode = value.__isDOMNode;
                }
                value = value.__target;
            }
            /*if rewriting closure object, rewrite the underlying object as well*/
            if (target.__isClosureObj){
                var setter = "set_"+key;
                target[setter](value);
            }
            return Reflect.set(target, key, value);
          },

          /*
          Let p be a proxy object. The following event handler will be called :
           - if p if a function itself, p(arg) : target -> p, thisArg -> window, args = args
           - if you do p.call or p.apply, first you go inside the get handler, read the value, and then go inside the apply handler

           We need function calls to be wrapped in proxy so that the thisArg can be properly handled.
           if target.name exists, then simply call the target using thisArg[target](...args) // Doesn't work because target.name might not a property of thisArg,
           otherwise follow the already implemented routine
          */

          apply (target, thisArg, args) {
                /*
                    If no thisArg, call it in the context of window ( this happens by default )
                    If the thisArg is a proxy object however it has no corresponding target method, call apply on the proxy object itself.
                    If the thisArg is not a proxy object, call the method on the thisArg itself.
                */

                // if (thisArg && (thisArg.__isClosureObj || isArguments(thisArg) ))
                //     thisArg = window
                // TODO
                // only remove proxies if the target is an inbuilt function
                // cause otherwise the propagation metadata would be incorrect
                if (args.length){
                        args.forEach((arg,_i)=>{
                            if (arg && arg.__isProxy)
                                args[_i] = arg.__target;
                        })
                }

                // if (target && target.name && thisArg[target.name])
                //     return thisArg[target.name](...args);

                if (thisArg && thisArg.__proto__ && ((thisArg.__proto__.constructor &&
                    applyTargetSpcl.indexOf(thisArg.__proto__.constructor.name)>=0) ||
                     thisArg.__target && thisArg.self == thisArg.__target) ){
                    // if (args.length){
                    //     args.forEach((arg,_i)=>{
                    //         if (arg && arg.__isProxy)
                    //             args[_i] = arg.__target;
                    //     })
                    // }
                    if (thisArg && thisArg.__target)
                        thisArg = thisArg.__target;
                }

                if (Reflect.apply.__isProxy)
                    Reflect.apply = Reflect.apply.__target;

                /*If target is indexed inside arguments, that means arguments was set as the
                thisObj due to instrumentation*/
                if (thisArg && (thisArg.__isClosureObj ))
                    thisArg = window

                /*Try catch can't catch certain errors, handle separately
                - thisArg of type permissions*/
                /*Permissions object*/
                if (thisArg && thisArg.__isProxy && thisArg.query)
                    thisArg = thisArg.__target;
                if (thisArg && thisArg.__isProxy && thisArg.getRegistration)
                    thisArg = thisArg.__target;
                if (thisArg && thisArg.__isProxy && thisArg.getBattery)
                    thisArg = thisArg.__target;
                if (thisArg && thisArg.__isProxy && thisArg.digest)
                    thisArg = thisArg.__target;

                if ( (target.name == "valueOf"  || target.name == "toString"  ||
                    target == Function.prototype.toString) && thisArg && thisArg.__target)
                    thisArg = thisArg.__target;

                try {
                    return Reflect.apply(target, thisArg, args);
                } catch (e){
                    if (thisArg && thisArg.__target)
                        return Reflect.apply(target, thisArg.__target, args);
                    throw e;
                }
          },
          construct (target, args, newPrototype) {
              if (newPrototype && newPrototype.__target)
                newPrototype = newPrototype.__target;
              return Reflect.construct(target, args, newPrototype);
          },
          setPrototypeOf (target, prototype) {
            if (prototype && prototype.__isProxy)
                prototype = prototype.__target;
            return Reflect.setPrototypeOf(target, prototype);
          },
          getPrototypeOf (target) {
            return Reflect.getPrototypeOf(target);
          },
          // getOwnPropertyDescriptor (target, propertyKey) {
          //   var r =  Reflect.getOwnPropertyDescriptor(target, propertyKey);
          //   loggerFunction(target, propertyKey, r, rootType + "_reads");
          //   return r;
          // },
          ownKeys (target) {
            return Reflect.ownKeys(target)
          },
          has (target, propertyKey) {
            return Reflect.has(target, propertyKey);
          },
          isExtensible (target) {
            return Reflect.isExtensible(target)
          },
          defineProperty (target, propertyKey, attributes) {
            if (attributes && attributes.__isProxy)
                attributes = attributes.__target;
            return Reflect.defineProperty(target, propertyKey, attributes);
          },
          deleteProperty (target, propertyKey) {
            return Reflect.deleteProperty(target, propertyKey);
          },
          preventExtensions (target) {
            return  Reflect.preventExtensions(target);
          },
          accessToPrivates (){
            return {ObjectTree: ObjectTree,getObjectId:getObjectId, appendObjectTree:appendObjectTree, hasObjectId:hasObjectId,
                    methodToProxy:methodToProxy, idToObject: idToObject}
          },

          getProcessedSignature (){
            var sigProcessor = new SignatureProcessor();
            sigProcessor.process();
            sigProcessor.postProcess();

            // // //Commenting out signature propogation for now
            // // //TODO
            sigProcessor.signaturePropogate();
            return sigProcessor.processedSig;
          }

        }

        return handler;
    }

    var globalProxyHandler = proxyEncapsulation(window,"global");

    var {proxy, revoke} = Proxy.revocable(window, globalProxyHandler);
    // Flag to disable proxy
    window.window = proxy;
    // window.window = window;
    globalProxyHandler.accessToPrivates().methodToProxy.set(window, proxy);

    if (pageLoaded){
        window.window = window;
    }

    this.getShadowStackHead = function(){
        return _shadowStackHead;
    }

    this.getNonCacheableFunctions = function() {
        // return Array.from(new Set(nonCacheableNodes));
        return nonCacheableNodes;
    }

    this.getCallGraph = function() {
        return callGraph;
    }

    this.getParentNodes = function(){
        return parentNodes;
    }

    this.getNonLeafNodes=function(){
        return nonLeafNodes;
    }

    this.getDC = function(){
        return domCounter;
    }

    this.updateDC = function(){
        domCounter++;
    }
    this.getInvocationProperties = function() {
        return nodesByProperties;
    }

    this.getTimingInfo = function(){
        return timingInfo;
    }

    this.getSigSizes = function(){
        return sigSizes;
    }

    this.setMutationContext = function(command, nodeId) {
        currentMutationContext = nodeId;
    }

	this.setGlobal = function (gthis) {
		globalThis = gthis;
	}

    this.getFunctions = function () {
        return functions;
    }

    this.getInvocations = function() {
        return invocationList;
    }

    this.getCacheStats = function () {
        return cacheStats;
    }

    this.getCustomCache = function() {
        return customLocalStorage;
    }

    this.getProcessedSignature = function() {
        return processedSignature;
    }

    this.setCustomCache = function(customCache) {
        this.customLocalStorage = customCache;
    }

    this.getObjectTree = function(){
        return ObjectTree;
    }

    this.getObjectToPath = function() {
        return objectToPath;
    }

    this.getObjectToId = function(){
        return ObjectToId;
    }

    var accumulateCache = function(nodeId) {
        var aggrCache = {};
        var lCallees = calleeMap[nodeId];

        var traverseChildren = function(nodeId) {
            var lCallees = calleeMap[nodeId];
            if (lCallees) {
                lCallees.forEach(function(callee){

                });
            }
        }
    }

    this.handleProtoAssignments = function(targetPrototype) {
        if (pageLoaded) return targetPrototype;
        if (targetPrototype && targetPrototype.__isProxy)
            return targetPrototype.__target;
        else return targetPrototype;
    }

    this.handleAssignments = function(assignment, assignee){
        return assignee;
    }

    this.handleTypeOf = function(obj){
        if (pageLoaded || _shadowStackHead in nonCacheableNodes)  return obj;
        var state,proxyMap,readInd, type;
        // return type;
        if (!pageLoaded && _shadowStackHead && obj && (state = obj.__isProxy)){
            switch (state) {
                case "argument" :
                    proxyMap = invocationToArgProxy; break;
                case "global" :
                    proxyMap = globalProxyHandler; break;
                case "this" :
                    proxyMap = invocationToThisProxy; break;
                case "closure":
                    proxyMap = invocationToClosureProxy; break;
            };
            var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[_shadowStackHead];
            if (!proxyPrivates) return obj;
            var objId = proxyPrivates.accessToPrivates().getObjectId(obj.__target);
            // if (objId[1]) throw new Error("typeof argument has no object id");
            if (objId[1]) return obj;
            type = typeof obj;
            customLocalStorage[_shadowStackHead].push([state+"_reads",objId[0], "typeof", type, type]);
            // if ( (readInd = customLocalStorage[_shadowStackHead].findIndex(e=>e[3]===objId[0])) >= 0)
                // customLocalStorage[_shadowStackHead].splice(readInd,1);

            return obj;
        }
        return obj;
    }

    this.handleComparison = function(obj, operator, value){
        if (pageLoaded || _shadowStackHead in nonCacheableNodes) return obj;
        var state, proxymap, type, readInd,cmpDelim = ";&;";
        if (_shadowStackHead && obj && (state = obj.__isProxy)){
            switch (state) {
                case "argument" :
                    proxyMap = invocationToArgProxy; break;
                case "global" :
                    proxyMap = globalProxyHandler; break;
                case "this" :
                    proxyMap = invocationToThisProxy; break;
                case "closure":
                    proxyMap = invocationToClosureProxy; break;
            };
            var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[_shadowStackHead];
            if (!proxyPrivates) return obj;
            var objId = proxyPrivates.accessToPrivates().getObjectId(obj.__target);
            if (objId[1]) return obj;

            var result;
            switch (operator){
                case "==": result = obj == value; break;
                case "===": result = obj === value; break;
                case "!=": result = obj != value; break;
                case "!==": result = obj !== value; break;
                case "instanceof": obj = target instanceof value; break;
                case "in": result = obj in value; break;
            }
            customLocalStorage[_shadowStackHead].push([state+"_reads",objId[0], operator+cmpDelim+result, value, value]);
            // if ( (readInd = customLocalStorage[_shadowStackHead].findIndex(e=>e[3]===objId[0])) >= 0)
            //     customLocalStorage[_shadowStackHead].splice(readInd,1);

            if (obj && obj.__isProxy) return obj.__target;
            else return obj;
        }
        if (obj && obj.__isProxy) return obj.__target;
        else return obj;
    }

    this.traversePath = function(path,params){
        var param,
            pathDelim = ";;;;";
        var state = path.split(pathDelim)[0],proxyMap;
            switch (state) {
                case "argument" :
                    param = params[0];break;
                case "global" :
                     param = window; break;
                case "this" :
                     param = params[2]; break;
                case "closure":
                    param = params[1];break;
            }
        path.split(pathDelim).forEach((prop, ind)=>{
            if (ind === 0) return;
            var len = path.split(pathDelim).length;
            if (param)
                param = param[prop];
        })
        return param;
    }

    this.getIdFromProxy = function(obj){
        if (pageLoaded) return null;
        var state, proxyMap;
        if (state = obj.__isProxy){
            switch (state) {
                case "argument" :
                    proxyMap = invocationToArgProxy; break;
                case "global" :
                    proxyMap = globalProxyHandler; break;
                case "this" :
                    proxyMap = invocationToThisProxy; break;
                case "closure":
                    proxyMap = invocationToClosureProxy; break;
            };
            var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[_shadowStackHead];
            if (!proxyPrivates) return;
            var objId = proxyPrivates.accessToPrivates().getObjectId(obj.__target);
            if (objId[1]) return null;

            return objId[0];
        }
    }

    this.getPathFromProxyId = function(id,state,nodeId){
        var proxyMap;
        switch (state) {
            case "argument" :
                proxyMap = invocationToArgProxy; break;
            case "global" :
                proxyMap = globalProxyHandler; break;
            case "this" :
                proxyMap = invocationToThisProxy; break;
            case "closure":
                proxyMap = invocationToClosureProxy; break;
        };
        var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[nodeId];
        var objectTree = proxyPrivates.accessToPrivates().ObjectTree;
        var objectToPath = {0:state};

        var constructPath = function(objectId){
            if (objectToPath[objectId]) return objectToPath[objectId];
            var path = "",  pathDelim = ";;;;";
            for (var nodeId in objectTree){
                for (var edge in objectTree[nodeId]) {
                    var _id = objectTree[nodeId][edge].indexOf(parseInt(objectId));
                    if (_id>=0) {
                        var parentPath = constructPath(nodeId);
                        path = parentPath + pathDelim + edge.substr(2);
                        objectToPath[objectId] = path;
                        return path;
                    }
                }
            }
            return path;
        }
        return constructPath(id);
    }

    this.handleProxyComparisons = function(...rhs){
        if (!rhs[0]) return rhs[0];
        if (rhs.length > 1 ) return rhs[rhs.length - 1];
        else if (rhs[0] && rhs[0].__isProxy) return rhs[0].__target;
        else return rhs[0];
    }

    this.isProxy = function(obj){
        if (pageLoaded) return obj;
        try {
            if (!obj || (typeof obj != "function" && typeof obj !="object")) return obj;
            if (obj.__isProxy) return obj.__target
            else return obj;
        } catch (e){
            return obj;
        }
    }

    this.logWrite = function(functionIdentifier, rhs, variableName, listOfProperties ){
        var key = variableName;
        if (listOfProperties.length > 0)
            key = _patchLogString(variableName, listOfProperties);
        customLocalStorage[functionIdentifier]["writes"][key] = rhs;
        return rhs;
    }

    var _patchLogString = function(input, varArray){
        var count = 0;
        var output = input.replace(/(\[).(\])/g, function(match, g1, g2, offset, string){
            var replaceString = varArray[count]
            if (typeof varArray[count] == "symbol")
                replaceString = varArray[count].toString();
            count++;
            return g1 + replaceString + g2;
        });
        return output
    }

    this.logRead = function(functionIdentifier, readArray, listOfProperties){
        var key = readArray[0]
        if (listOfProperties.length > 0)
            key = _patchLogString(readArray[0],listOfProperties)
        customLocalStorage[functionIdentifier]["reads"][key] = readArray[1];
        return readArray[1];
    }

    this.logThrowStatement = function(throwArg){
        var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        if (pageLoaded || !cacheIndex || nonCacheableNodes[cacheIndex]) return throwArg;
        var evalArg="";
        if (throwArg instanceof Error){
            evalArg += "new Error(" + JSON.stringify(escapeRegExp(throwArg.message)) + ")";
        } else evalArg = throwArg;
        var throwString = "throw " + evalArg;
        customLocalStorage[cacheIndex]["IBF"] += "\n" + throwString + "\n";
        return throwArg;
    }

    var cleanUpReturnValue = function(ret,ind, seenObjs){
        try {
            switch (typeof ret) {
                case "object" :
                    if (!ret || seenObjs.indexOf(ret)>=0)
                        return;
                    /*check for window object*/
                    if (ret && ret.self == ret)
                        return;
                    if (ind === -1) {
                        seenObjs.push(ret);
                    } else {
                        if (!ret[ind] || ret[ind].self == ret[ind]){
                            return;
                        }
                        else if (ret[ind].__isProxy)
                            ret[ind] = ret[ind].__target;
                        seenObjs.push(ret[ind]);
                        ret = ret[ind];
                    }
                        if (Array.isArray(ret)){
                        for (var _i = 0, _len = ret.length; _i < _len; _i++) {
                            cleanUpReturnValue(ret,_i, seenObjs);
                        }
                    } else {
                        /*o.keys returns enumerable properties only
                        not sure if we need to rewrite non enumerable properties as well*/
                        var propNames = Object.keys(ret);
                        for (var k of propNames ){
                            cleanUpReturnValue(ret,k, seenObjs);
                        }
                    }
                    break;
                case "function":
                    if (ind === -1) {
                    } else if (ret[ind] && ret[ind].__isProxy)
                        ret[ind] = ret[ind].__target;
                default: break;
            }
            return;
        } catch (e){
            return;
        }
    }

    this.logReturnValue = function(functionIdentifier, returnValue, params) {
        var cacheIndex = functionIdentifier + "_count" + invocationsIndName[functionIdentifier];
        var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        if (pageLoaded || !cacheIndex || nonCacheableNodes[cacheIndex]) return returnValue;
        // if (isDOMInheritedProperty(returnValue)){
        //     nonCacheableNodes[cacheIndex] = "DOM";
        //     //Don't need to reset shadow stack head as the exit function is already called
        //     // hence the shadow stack head no longer points to the current function
        //     // _shadowStackHead = null;
        //     // this.exitFunction(functionIdentifier, params);
        //     return returnValue;
        // }
        // return returnValue;
        // var _retString = omniStringifier.stringify(returnValue,"read",2);
        // if (_retString && _retString instanceof Error) {
        //         nonCacheableNodes[cacheIndex] = _retString.message;
        // }
        // /*If the return value couldn't be stringified, doesn't matter. The function is marked as uncacheable anyway*/
        // if (customLocalStorage[cacheIndex]) customLocalStorage[cacheIndex]["returnValue"] = _retString;

        var seenObjs = [];
        if (returnValue && returnValue.__isProxy)
            returnValue = returnValue.__target;
        return cleanUpReturnValue(returnValue, -1,seenObjs), returnValue;
    }

    var logNonProxyParams = function(nodeId,params){
        for(var i in params) {
                if (params[i] != null && !params[i].__isProxy && typeof params[i] != "function")
                    var strParam =  stringify(params[i]);
                 if (strParam && strParam.__proto__.__proto__ == "Error") return
                 customLocalStorage[nodeId].arguments.before[i] = strParam;
        }
    }


    var mergeObjects = function(src, dst){
        for (var property in src) {
            dst[property] = src[property];
        }
    }

    var replay_arg = (log, arg,cmp,params) => {
        var result = true;
        var prop = log[1], value = log[2];
        // if (!cmp){
        //     if (typeof value == "object")
        //         value = value[0];
        //     else value = omniStringifier.parse(value,params);
        // }
        result = result && traverseToTarget(arg, prop, value,cmp);
        return result;
    };

    var getChildAccessor = function(log, params, path2function){
        var fnRoot;
        var fnScope = path2function.split(';;;;')[0],fnKey = path2function.split(';;;;').slice(1,);
        switch (fnScope){
            case "global": fnRoot = window; break;
            case "argument":fnRoot = params[0];break;
            case "closure":fnRoot = params[1];break;
            case "this": fnRoot = params[2];break;
        }
        var fnkeyLen = fnKey.length;
        fnKey.forEach((key)=>{
            fnRoot = fnRoot[key];
        })
        return fnRoot;
    }

    var replay_childClosure = function(log,arg,cmp,params){
        var tokens = log[1].split(";&;")
        var [path2function,prop] = [tokens.slice(0,tokens.length-1),tokens[tokens.length-1]],
            value = log[2], fnRoot;
        // if (!cmp) {
        //     if (typeof value != "object")
        //         throw new Error("Can't replay child closure where value is a reference");
        //     value = value[0]
        // }
        var newParams = [...params];
        var fnRoot;
        path2function.forEach((path)=>{
            fnRoot = getChildAccessor(log, newParams, path);
            var scopeObj = fnRoot.__getScope__();
            //update the closure scope
            //if path2function has more than 2 entries, then the second one
            // has to be a closure, so update the closure params
            newParams[1] = scopeObj
        })
        var accessor = cmp ? "__get__" : "__set__";
        return fnRoot[accessor](prop,value)
    }

    var replay_childIBF = function(log, params){
        var fnRoot = getChildAccessor(log, params);
        fnRoot["__replayIBF__"](log[2]);
    }

    var replay_closure = (write_array, closure,cmp) => {
        var result = true;
        write_array.forEach((write_log)=>{
            var prop = write_log[0], value = write_log[1];
            result = result &&  traverseToTarget(closure, prop, value,cmp);
            // target = omniStringifier.parse(value);
            // eval(write_log);
        })
        return result;
    };
    var replay_this = (write_array, thisObj,cmp) => {
        var result = true;
        write_array.forEach((write_log)=>{
            var prop = write_log[0], value = write_log[1];
            result = result &&  traverseToTarget(thisObj, prop, value,cmp);
            // target = omniStringifier.parse(value);
            // eval(write_log);
        })
        return result;
    }
    var replay_global = (write_array, global,cmp) => {
        var result = true;
        write_array.forEach((write_log)=>{
            var prop = write_log[0], value = write_log[1];
            result = result &&  traverseToTarget(global, prop, value,cmp);
            // target = omniStringifier.parse(value);
            // eval(write_log);
        })
        return result;
    }

    var replay_IBF = (IBFs, arg, closure, thisObj) => {
        eval(IBFs);
    }

    this.replay_IBF = replay_IBF;

    var comparisonOperators = ["==","!=","===","!==","instanceof","in"]

    var specialMatchingPaths = ["localStorage","cookie"]

    var traverseToTarget  = function(root, path,value,cmp){
        var target = root,
            pathDelim = ";;;;", result = !cmp, opIndex = -1,
            cmpDelim = ";&;";
        path.split(pathDelim).forEach((prop, ind)=>{
            if (ind==0) return;
            var len = path.split(pathDelim).length;
            if ( target && (ind == len-1 || prop == "typeof")) {
                if (cmp){
                    if (specialMatchingPaths.indexOf(prop)>=0)
                        result = true;
                    else if (prop == "typeof")
                        result = typeof target == value;
                    else if (prop == "self")
                        result = target[prop] == target;
                    else if (prop.indexOf(cmpDelim)>=0) {
                        if ((opIndex = comparisonOperators.indexOf(prop.split(cmpDelim)[0]))>=0) {
                            var cmpOut = prop.split(cmpDelim)[1] === 'true';
                            switch (comparisonOperators[opIndex]){
                                case "==": result = (target == value) == cmpOut; break;
                                case "===": result = (target === value) == cmpOut; break;
                                case "!=": result = (target != value) == cmpOut; break;
                                case "!==": result = (target !== value) == cmpOut; break;
                                case "instanceof": result = (target instanceof value) == cmpOut; break;
                                case "in": result = (target in value) == cmpOut; break;
                            }
                        }
                    }
                    else {
                        if (typeof value == "string"){
                            var [Ovalue, Otype, Olen] = value.split(';;&;;');
                            if (Otype){
                                Olen = Number.parseInt(Olen);
                                if (Otype == "array" ) {
                                    if (!Array.isArray(target[prop]))
                                        result = false;
                                    else if (Olen != target[prop].length)
                                        result = false;
                                    else {
                                        var [tval,_,__] = omniStringifier.stringify(target[prop],"read").split(';;&;;');
                                        result = tval == Ovalue;
                                    }
                                } else if (Otype == "object"){
                                    if (typeof target[prop] != "object")
                                        result = false;
                                    else if (target[prop] && Object.keys(target[prop]).length != Olen)
                                        result = false;
                                    else {
                                        var [tval,_,__] = omniStringifier.stringify(target[prop],"read").split(';;&;;');
                                        result = tval == Ovalue;
                                    }
                                }
                            }
                            else {
                                var tval = omniStringifier.stringify(target[prop],"read")
                                if (typeof tval == "string")
                                    result = tval.split(';;&;;')[0] == Ovalue;
                                else result = target[prop] == Ovalue;
                            }
                        }
                        else {
                            result = target[prop] == value[0];
                        }
                    }
                }
                else {
                    if (target.__isClosureObj){
                        target["set"+prop](value)

                    } else {
                        target[prop] = (value);
                    }
                    result = true;
                }
            } else if (target)
                target = target[prop];
        })
        return result;
    }

    this.traverseToTarget = traverseToTarget;

    var verifyAndReplayCache = function(cacheIndex,writeObj) {
        //Replay all the non global writes speculatively
        var sig = processedSignature[cacheIndex];
        if (Object.prototype.toString.call(writeObj).indexOf("Arguments")>=0)
            replay_arg(sig.argument_writes, writeObj);
        else if (writeObj.__isClosureProxy)
            replay_closure(sig.closure_writes, writeObj);
        else replay_this(sig.this_writes, writeObj);
    }

    var getArgTypes = function(args, delim){
        var argTypes = "";
        for (var a of args)
            argTypes += typeof a + delim;
        return argTypes;
    }

    var exceedsInvocationLimit = function(nodeId){
        return nodeId.split("_count")[1] > INVOCATION_LIMIT;
    }

    this.cacheInit = function(nodeId, isRoot){
        if (invocationsIndName[nodeId] != null)
            invocationsIndName[nodeId]++;
        else invocationsIndName[nodeId] = 0;

        var cacheIndex = nodeId + "_count" + invocationsIndName[nodeId];
        // invocationList.push(cacheIndex);


        // if (instrumentationPattern == "cg"){
        //     var _e = new Error;
        //     var sd = _e.stack.split('\n');
        //     if (sd.length == 4)
        //         isRoot = true;
        // }
        // if (isRoot)
        //     rootInvocs.push(cacheIndex);

        // timingInfo[cacheIndex].push(window.performance.now());
        if (instrumentationPattern == "record" || instrumentationPattern == "replay") {

            callGraph[cacheIndex] = [];
            customLocalStorage[cacheIndex] = []

            if (_shadowStackHead) {
                callGraph[_shadowStackHead].push(cacheIndex)
                // insert placeholder for children signature
                // if (customLocalStorage[_shadowStackHead])
                customLocalStorage[_shadowStackHead].push(cacheIndex)
                // Before entering child function, freeze the state of the parent function
                // freezeReadState(_shadowStackHead);
            } else {
                parentNodes.push(cacheIndex);
            }

            shadowStack.push(cacheIndex);
            _shadowStackHead = cacheIndex;

            PMD[cacheIndex] = {argument:[],this:[],closure:[]}

            // if (invocationsIndName[nodeId] > INVOCATION_LIMIT ){
            //     nonCacheableNodes[cacheIndex] = "INVOCLIMIT";
            //     // _shadowStackHead = null;
            //     // window.performance.mark(cacheIndex);
            //     // timingInfo[cacheIndex].push(window.performance.now());
            //     return;
            // }
            customLocalStorage[cacheIndex]["IBF"] = "";
            customLocalStorage[cacheIndex].CFG = [];
            customLocalStorage[cacheIndex]["ec"] = window && window.document ?
                window.document.location.href : null;
            customLocalStorage[cacheIndex].readKeys = new Set();
            customLocalStorage[cacheIndex].writeKeys = new Set();
            // customLocalStorage[cacheIndex].startTime = window.performance.now();
        } else {
            // if (!(cacheIndex in callGraph))
            timingInfo[cacheIndex] = [];
            timingInfo[cacheIndex].push(window.performance.now());

            callGraph[cacheIndex] = [];
            if (_shadowStackHead) {
                callGraph[_shadowStackHead].push(cacheIndex)
            } else {
                rootInvocs.push(cacheIndex);
                curRoot = cacheIndex;
            }


            shadowStack.push(cacheIndex);
            _shadowStackHead = cacheIndex;
        }
        // window.performance.mark(cacheIndex);
    }

    var checkForCacheHit = function(sig,arg,closure,thisObj){
        try {
            var evalString = sig.filter(e=>e[0]=="finalRead")[0][1];
            // evalString = evalString.split("&&").slice(0,2).join("&&");
            var CHF = new Function('arg,closure,thisObj','return ' + evalString);
            return CHF(arg,closure,thisObj) && false;
            return false;
        } catch (e) {
            throw new Error("Error while determining cache hit status");
        }
    }

    /*
    Depending on value of cmp, will compare of execute the given state
    if cmp is true will compare and return the result otherwise execute
    state : Signature of the function who's state has to be compared
    Returns true when executing state, and for compare will return the result of comparing the state
    */
    var compareOrExecuteState = function(sig,cmp, ...params){
        var fn = replay_arg, param = null
            result = true;
        var delim = cmp ? "_reads" : "_writes";
        // var sig = sig.filter(e=>e[0].indexOf(delim)>=0);
        var keys = [...new Set(sig.map(e=>e[0]))];
        var scInd = 0, ind=0; //short-circuit index;
        for (entry of sig){
        // sig.forEach((entry,ind)=>{
            var type = entry[0];
            var state = entry[0].split(delim)[0],proxyMap;
            fn = replay_arg;
            switch (state) {
                case "argument" :
                    param = params[0];break;
                case "global" :
                     param = window; break;
                case "this" :
                     param = params[2]; break;
                case "closure":
                    param = params[1];break;
                case "childClosure":
                    fn = replay_childClosure;break
            }
            result = result && fn(entry,param, cmp,params);
            ind++;
            scInd = ind;
            if (cmp && !result)
                return [result,scInd];
        }

        return [result,scInd];
    }

    var preProcessWrites = function(writeSig, returnValue, params){
        writeSig.forEach((entry)=>{
            if (typeof entry[2] == "object")
                entry[2] = entry[2][0];
            else entry[2] = omniStringifier.parse(entry[2],params);
        })

        if (returnValue && returnValue.length != 3){
            returnValue[1] =  omniStringifier.parse(returnValue[1],params);
        }
    }

    /*
    Returns an array
    [cacheHit, return value]
    params : argument, closure, this
    */

    this.cacheAndReplay = function(nodeId, ...params){
        // return [false,null];
        // var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        var cacheIndex = nodeId + "_count" + invocationsIndName[nodeId];
        // if (skipReplay){
        //     cacheStats.misses.empty.push(cacheIndex);
        //     return [false, null]
        // }
        if (invocationsIndName[nodeId] > INVOCATION_LIMIT){
            cacheStats.misses.empty.push(cacheIndex);
            return [false,null];
        }
        var sig, returnValue = [];
        // return [false,null];
        // timingInfo[cacheIndex]=[];
        // timingInfo[cacheIndex].push(window.performance.now());
        if (sig = processedSignature[keysToStdKeys[cacheIndex]]) {
            // return []
            if (!sig.length){
                cacheStats.misses.empty.push(cacheIndex);
                // timingInfo[cacheIndex].push(window.performance.now());
                return [false, null];
            }
            try {
                /*Iterate sig once and seperate different parts*/
                var ibf, childIBF, _ret, readSig=[], writeSig=[],ret;
                for (_e of sig){
                    if (_e[0].indexOf("_reads")>=0)
                        readSig.push(_e);
                    else if (_e[0].indexOf("_writes")>=0)
                        writeSig.push(_e);
                    else if (_e[0] == "IBF")
                        ibf = _e;
                    else if (_e[0]== "childIBF")
                        childIBF = _e;
                    else if (_e[0] == "returnValue")
                        _ret = _e;
                }
                var readStateMatch = compareOrExecuteState(readSig,true,...params);
                if (readStateMatch[0]) {
                    // cacheStats.hits.push(cacheIndex);
                    // timingInfo[cacheIndex].push(window.performance.now());
                    var _wP = writeStateProcessed.get(sig);
                    if (_wP === undefined){
                        try {
                            preProcessWrites(writeSig, _ret, params);
                        } catch (e){
                            writeStateProcessed.set(sig, false);
                            throw e;
                        }
                    } else if (_wP === false){
                        cacheStats.misses.mismatch.push(cacheIndex);
                        return [false, null];
                    }
                    writeStateProcessed.set(sig, true);
                    compareOrExecuteState(writeSig,false,...params)
                    // _i = sig.filter(e=>e[0] == "IBF");
                    if (ibf){
                        // return [false, null];
                        replay_IBF(ibf[1],...params);
                    }
                    // _i = sig.filter(e=>e[0] == "childIBF")
                    if (childIBF)
                        replay_childIBF(childIBF[1],params)
                    // compareOrExecuteState(sig,false,...params)
                    // var _ret = sig.filter(e=>e[0] == "returnValue"),ret;
                    if (_ret){
                        // if (_ret.length == 3)
                        ret = _ret[1];
                        // else ret = omniStringifier.parse(_ret[1],params);
                    }
                    cacheStats.hits.push(cacheIndex);
                    // timingInfo[cacheIndex].push(window.performance.now());
                    // sigSizes[cacheIndex]=sig.reduce((acc, cur)=>{
                    //     var len =0;
                    //     if (typeof cur[1] == "string")
                    //         len += cur[1].length
                    //     if (cur[2] && typeof cur[2] == "string")
                    //         len += cur[2].length;
                    //     return len + acc},0);
                    return [true,ret];
                } else {
                    cacheStats.misses.mismatch.push(cacheIndex);
                    // timingInfo[cacheIndex].push(window.performance.now());
                    // var _ind = readStateMatch[1];
                    // sigSizes[cacheIndex]=sig.slice(0,_ind).reduce((acc, cur)=>{
                    //     var len =0;
                    //     if (typeof cur[1] == "string")
                    //         len += cur[1].length
                    //     if (cur[2] && typeof cur[2] == "string")
                    //         len += cur[2].length;
                    //     return len + acc},0);
                    return [false, null];
                }
            } catch (e) {
                if (ibf && ibf.length && ibf[0][1].indexOf("throw ")>=0){
                    cacheStats.hits.push(cacheIndex);
                    // timingInfo[cacheIndex].push(window.performance.now());
                    // sigSizes[cacheIndex]=sig.reduce((acc, cur)=>{
                    //     var len =0;
                    //     if (typeof cur[1] == "string")
                    //         len += cur[1].length
                    //     if (cur[2] && typeof cur[2] == "string")
                    //         len += cur[2].length;
                    //     return len + acc},0);
                    throw e;
                }
                cacheStats.misses.error.push([cacheIndex,e.message]);

                // if (e.message && e.message.indexOf("OMNI")<0) throw e;
                // cacheStats.hits.pop();
                // timingInfo[cacheIndex].push(window.performance.now());
                return [false,null];
            }
        }
        cacheStats.misses.empty.push(cacheIndex);
        // timingInfo[cacheIndex].push(window.performance.now());
        return [false,null];
    }

    var getRootIds = function(readArr){
        var ids = [];
        /*If the 4th index is string, it means the read has been processed already
        however if the logType is write, then add it regardless*/
        readArr.forEach((read)=>{
            if (typeof read[3] != "string" ||
                read[3].indexOf("__func__source")>=0 ||
                read[0].indexOf("_write")>=0)
                ids.push(read[1]);
        })
        // return [...new Set(ids)];
        return ids;
    }

    var filterSignature = function(e, roots, writes, key){
        if (e[0] != key) return true;
        var rootInd = roots.indexOf(e[4]);
        if (rootInd>=0){
            roots.splice(rootInd, 1);
            return false;
        }
        var writeInd = writes.indexOf(e[4]);
        if (writeInd>=0){
            writes.splice(writeInd,1);
            return false;
        }
        return true;
    }

    var uniqueSignature = function(sig){
        var strSig = sig.map(e=>JSON.stringify(e));
        var uS = new Set(strSig);
        var uniqueArr = [...uS].map(e=>JSON.parse(e));
        return uniqueArr;
    }

    var freezeReadState = function(nodeId){
        if (nodeId in nonCacheableNodes) return;
        var signature = customLocalStorage[nodeId];
        if (signature == null) return;
        if (signature.length > sigSizeLimit) {
            nonCacheableNodes[nodeId]="signature size exceeded capacity";
            return;
        }
        // signature = uniqueSignature(signature);
        // var readKeys = [...new Set(signature.filter(e=>e[0].indexOf("reads")>0).map(e=>e[0]))];
        var readKeys = signature.readKeys;
        readKeys.forEach((key)=>{
            var state = key.split("_reads")[0],proxyMap;
            var currStateWrites = invocationToWrites[nodeId] ? invocationToWrites[nodeId].filter(e=>e[0]==state).map(e=>e[1]) : [];
            switch (state) {
                case "argument" :
                    proxyMap = invocationToArgProxy; break;
                case "global" :
                    proxyMap = globalProxyHandler; break;
                case "this" :
                    proxyMap = invocationToThisProxy; break;
                case "closure":
                    proxyMap = invocationToClosureProxy; break;
            }
            var rootObjects = getRootIds(signature.filter(e=>e[0].split("_")[0]==state));
            // customLocalStorage[nodeId] = signature.filter((e)=> { return e[0] != key ||
            //     (rootObjects.indexOf(e[4])<0 && currStateWrites.indexOf(e[4])<0)} );
            //Disable filtering of signature entriesinde
            // customLocalStorage[nodeId] = signature.filter((e)=>{return filterSignature(e, rootObjects, currStateWrites, key)});
            (signature.returnValue != null) && (customLocalStorage[nodeId].returnValue = signature.returnValue)
            signature.IBF && (customLocalStorage[nodeId].IBF = signature.IBF)
            customLocalStorage[nodeId].ec = signature.ec
            customLocalStorage[nodeId].readKeys = signature.readKeys;
            customLocalStorage[nodeId].writeKeys = signature.writeKeys;
            signature = customLocalStorage[nodeId];
            signature.forEach((readArr,ind)=>{
                if (typeof readArr[3] == "number" && readArr[0] == key){
                    var proxyPrivates = state == "global" ? globalProxyHandler : proxyMap[nodeId];
                    var obj = proxyPrivates.accessToPrivates().idToObject[readArr[3]];
                    if (!obj) console.error("Object not found during freezing read state");
                    var str = omniStringifier.stringify(obj,"read",1);
                    if (str){
                        if (str instanceof Error){
                            nonCacheableNodes[nodeId] = str.message;
                            return 1;
                        }
                        if (str.length > OMNI_SIZE_LIMIT){
                            nonCacheableNodes[nodeId] = "Value exceeded OMNI_SIZE_LIMIT";
                            return 1;
                        }
                    }
                    signature[ind] = [readArr[0], readArr[1], readArr[2], str, null];
                }
            })
        })
    }

    this.exitFunction = function(nodeId, enableRecord){
        // var cacheIndexExp = nodeId + "_count" + invocationsIndName[nodeId];
        var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        if (!cacheIndex) return;

        if (instrumentationPattern == "cg")
                timingInfo[cacheIndex].push(window.performance.now());

        if (instrumentationPattern == "replay")
            return;
        shadowStack.pop();
        if (shadowStack.length)
            _shadowStackHead = shadowStack[shadowStack.length - 1];
        else {
            _shadowStackHead = null;
        }

    }

    this.logBranchTaken = function(nodeId, branchInfo){
        var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        if (!cacheIndex) return;
        customLocalStorage[cacheIndex].CFG.push(branchInfo);
    }

    this.updateClosureCache = function(cacheIndex, closureObj){
        Object.keys(closureObj).forEach((k)=>{
            if (typeof closureObj[k] != "object"){
                var writeAr = [0, k, closureObj[k]];
                customLocalStorage[cacheIndex]["closure_writes"].push(writeAr);
            }
        })
        return;
    }

    this.dumpArguments = function(nodeId, params) {
        // functionTimerE[nodeId] = performance.now();
        // window.sigStack[nodeId].push(functionTimerE[nodeId] - functionTimerS[nodeId]);
        // return;
        if (customLocalStorage[nodeId]["arguments"])
            customLocalStorage[nodeId]["arguments"]["after"] = params;
        shadowStack.pop();
    }

    this.logCallee = function(callee, calleeRes){
        if (callee && callee.toString){
            var _isNative = isNative(callee.toString());
            if(!_isNative){
                if (!_shadowStackHead)
                    throw new Error("no shadow stack found");
                nonLeafNodes.push(_shadowStackHead);
            }
        } else {
            console.error(callee + " no toString method for object");
        }
        return calleeRes;
    }

    this.logIBF = function(functionId, IBF, callee, IBFStrDecl, IBFStrCall, argStrs, argVals){
        if (callee && callee.toString){
            var actualCallee = callee;
            if (callee.__isProxy) actualCallee = callee.__target;
            var _isNative = isNative(Object.prototype.toString.call(actualCallee));
            if (!_isNative && !actualCallee.__isShimmed__) {
                if (callee.__isProxy){
                    var childLen = callGraph[_shadowStackHead].length;
                    if (childLen) {
                        var stackHead = callGraph[_shadowStackHead][childLen-1]
                        handlePropagatedProxy(callee, null, "closure",stackHead)
                    }
                }
                return IBF;
            }
        } else {
            // TODO callee has no string method, can't store metedata information
            // console.error("Callee has no toString method")
        }
        var ibfStr = IBFStrCall, argsConverted = [],val;
        // var cacheIndex = functionId + "_count" + invocationsIndName[functionId];
        var cacheIndex = _shadowStackHead ? _shadowStackHead : null;
        if (!cacheIndex || nonCacheableNodes[cacheIndex] || pageLoaded)
            return IBF;

        // if ((IBFStrDecl != null && IBFStrDecl.indexOf("createElement")>=0 )){
        //     nonCacheableNodes[cacheIndex] = "DOM element being created";
        //     return IBF;
        // }
        /*
        Commented the bottom part, because all the arguments are being statically handled
        However moving forward, we need to dynamically handle these, as static analysis
        doesn't completely create everything we need.
        */
        var stringificationErr = false;
        // argVals.forEach((arg,i)=>{
        //     var _argStr = omniStringifier.stringify(arg,"write",2);
        //     if (_argStr && _argStr instanceof Error){
        //         nonCacheableNodes[cacheIndex] = _argStr.message;
        //         stringificationErr = true;
        //     }
        //     if (typeof _argStr == "object") {
        //         val = _argStr[0];
        //     } else val  = " omniStringifier.parse(\"" + escapeRegExp(_argStr) + "\");\n";

        //     if (typeof arg == "string" && (arg.indexOf("arg[")>=0 || arg.indexOf("closure.")>=0))
        //         ibfStr += argStrs[i] + " = " + arg + ";\n"
        //     else ibfStr +=  argStrs[i]+ ' = ' + val + ";\n";
        // })
        // if (stringificationErr)
        //     return IBF;

        // ibfStr += IBFStrCall;
        if (customLocalStorage[cacheIndex]["IBF"] == null)
            customLocalStorage[cacheIndex]["IBF"] = ""
        customLocalStorage[cacheIndex]["IBF"] += "\n" + ibfStr + "\n";

        return IBF;
    }

    this.createArgumentProxy = function(argObj){
        if (pageLoaded || _shadowStackHead in nonCacheableNodes) return argObj;
        var nodeId = _shadowStackHead ? _shadowStackHead : null;
        if (!nodeId) return argObj;
        if (!argObj.length) return argObj;
        if (argObj.__isProxy) argObj = argObj.__target;
        var proxyHandler = proxyEncapsulation(argObj,"argument");
        var argProxy = new Proxy(argObj, proxyHandler);
        // proxyHandler.accessToPrivates().proxyToMethod.set(argProxy, argObj);
        if (invocationToArgProxy[nodeId]) console.error("invocation already has a previous proxy");
        invocationToArgProxy[nodeId] = proxyHandler;
        return argProxy
    }

    this.createClosureProxy = function(closureObj, scopeId){
        if (pageLoaded || _shadowStackHead in nonCacheableNodes) return closureObj;
        var nodeId = _shadowStackHead ? _shadowStackHead : null;
        if (!nodeId ) return closureObj;
        if (!Object.keys(closureObj).length) return closureObj;
        if (closureObj.__isProxy) closureObj = closureObj.__target;
        var proxyHandler;
        if (!(nodeId in functionToScopes))
            functionToScopes[nodeId] = [];
        if (functionToScopes[nodeId].indexOf(scopeId)<0)
            functionToScopes[nodeId].push(scopeId);
        if (scopeId in invocationToClosureProxy)
            proxyHandler = invocationToClosureProxy[scopeId];
        else {
            proxyHandler = proxyEncapsulation(closureObj,"closure", scopeId);
            invocationToClosureProxy[scopeId] = proxyHandler;
        }
        var closureProxy = new Proxy(closureObj, proxyHandler);
        // proxyHandler.accessToPrivates().proxyToMethod.set(closureProxy, closureObj);
        return closureProxy;
    }

    /*
    thisProxy is separate from argument Proxy, as the target object itself could
    be a proxy object, and we don't want to wrap a proxy on top a proxy
    therefore, first we check if it already is a proxy and get rid of it, before wrapping
    it up in a proxy.
    */
    this.createThisProxy = function(thisObj){
        if (pageLoaded || !thisObj || (typeof thisObj != "function" && typeof thisObj != "object")
         || _shadowStackHead in nonCacheableNodes ) return thisObj;
        if (thisObj.withCredentials != null) {
            nonCacheableNodes[_shadowStackHead] = "This: XMLHttpRequest"
            return thisObj;
        }
        var nodeId = _shadowStackHead ? _shadowStackHead : null;
        if (!nodeId) return thisObj;
        if (thisObj.__isProxy || thisObj == window) {
            handlePropagatedProxy(thisObj, null, "this",_shadowStackHead)
            thisObj = thisObj.__target != null ? thisObj.__target : window
        }
        var proxyHandler = proxyEncapsulation(thisObj,"this");
        var thisProxy = new Proxy(thisObj, proxyHandler);
        // proxyHandler.accessToPrivates().proxyToMethod.set(thisProxy, thisObj);
        if (invocationToThisProxy[nodeId]) console.error("invocation already has a previous proxy");
        invocationToThisProxy[nodeId] =   proxyHandler;
        return thisProxy;
    }

    var escapeRegExp = function(str) {
        return str.replace(/[\"]/g, "\\$&");
    }

    function isNative(fn) {
        return (/\{\s*\[native code\]\s*\}/).test('' + fn);
    }

    function stringify(obj) {
        try {
            return JSON.stringify(obj, function (key, value) {
              if (value && value.__isProxy)
                    value = value.__target;
              var fnBody;
              if (value instanceof Function || typeof value == 'function') {
                return "";
                if ((/\{\s*\[native code\]\s*\}/).test(value.toString())) {
                    return value.name;
                }
                fnBody = value.toString();

                if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { /*this is ES6 Arrow Function*/
                  return '_NuFrRa_' + fnBody;
                }
                return fnBody;
              }
              if (value instanceof RegExp) {
                return '_PxEgEr_' + value;
              }
              return value;
            });
        } catch(e){
            return e;
        }
    };

    function parse(str, date2obj) {

    var iso8061 = date2obj ? /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/ : false;

    return JSON.parse(str, function (key, value) {
        var prefix;

        if (typeof value != 'string') {
        return value;
        }
        if (value.length < 8) {
        return value;
        }

        prefix = value.substring(0, 8);

        if (iso8061 && value.match(iso8061)) {
            return new Date(value);
        }
        if (prefix === 'function') {
            // if ((/\{\s*\[native code\]\s*\}/).test(value))
            //     return nativeObjectsStore[key]
            return eval('(' + value + ')');
        }
        if (prefix === '_PxEgEr_') {
            return eval(value.slice(8));
        }
        if (prefix === '_NuFrRa_') {
            return eval(value.slice(8));
        }

        return value;
        });
    };

    class SignatureProcessor{

            //ptype - specifies the type of processing to do, by pointing to the node
            ///TODO
            // Clean the logic with objecttopathPerOT , since we aren't keeping it per ot
            constructor(signature, ObjectTree, callGraph, pType){
                this.signature = signature;
                this.objectTree = ObjectTree;
                this.processedSig = {};
                this.objectToPathPerOT = {"this":{}};
                this.callGraph = callGraph;
                this.logType = pType;
                this.pathDelim = ";;;;";
            }

            process(){
                var objectToPathPerOT = this.objectToPathPerOT;
                var objectTreeThis = this.objectTree;
                var signature = this.signature;
                var processedSig = this.processedSig;
                var reverseObjectToId = {};
                var logType = this.logType;
                var callGraph = this.callGraph;
                var pathDelim = this.pathDelim;

                var init = function(){
                    // switch(logType){
                    //     case  "global" :
                    //         objectToPathPerOT.this[0] = "window";
                    //         break;
                    //     case "argument" :
                    //         objectToPathPerOT.this[0] = "arg"
                    //         break;
                    //     case "closure":
                    //         objectToPathPerOT.this[0] = "closure"
                    //         break;
                    //     case "this" :
                    //         objectToPathPerOT.this[0] = "thisObj";
                    //         break;
                    // }
                    objectToPathPerOT.this[0] = "";
                }

                var stringify = function (obj) {

                    return JSON.stringify(obj, function (key, value) {
                      if (value.__isProxy)
                        value = value.__target;
                      var fnBody;
                      if (value instanceof Function || typeof value == 'function') {
                        return "";
                      //   return value.toString();

                      //   if ((/\{\s*\[native code\]\s*\}/).test(value.toString())) {
                      //       return {};
                      //   }
                      //   fnBody = value.toString();

                      //   if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { //this is ES6 Arrow Function
                      //     return '_NuFrRa_' + fnBody;
                      //   }
                      //   return fnBody;
                      // }
                      // if (value instanceof RegExp) {
                      //   return '_PxEgEr_' + value;
                      }
                      return value;
                    });
                };

                var _removeRedundantReads = function(nodeId, writeArray){
                    var readLength = signature[nodeId].reads.length;
                    if (readLength) {
                        while (readLength--){
                            if ( signature[nodeId].reads[readLength][0] == writeArray[0] && signature[nodeId].reads[readLength][1] == writeArray[1] )
                                signature[nodeId].reads.splice(readLength, 1);
                        }
                    }
                }
                var removeReduntantReads = function(){
                    for (var nodeId in signature){
                        if (signature[nodeId].writes.length) {
                            signature[nodeId].writes.forEach(function(write){
                                _removeRedundantReads(nodeId, write);
                            })
                        }
                    }
                }

                /*
                While constructing paths instead of using the dot operator for properties
                we use the bracket operators for two reasons
                - If the property is a number
                - if the property has special symbols like dot itlelf or spaces
                */

                var constructPath = function(objectId, OT="this"){
                    if (!objectToPathPerOT[OT]) objectToPathPerOT[OT] = {0:"arguments"};
                    if (objectToPathPerOT[OT][objectId] == "" || objectToPathPerOT[OT][objectId]) return objectToPathPerOT[OT][objectId];
                    var path = "";
                    var objectTree = OT == "this" ? objectTreeThis : invocationToArgProxy[OT].accessToPrivates().ObjectTree;
                    for (var nodeId in objectTree){
                        for (var edge in objectTree[nodeId]) {
                            var _id = objectTree[nodeId][edge].indexOf(parseInt(objectId));
                            if (_id>=0) {
                                var parentPath = constructPath(nodeId, OT);
                                // path = parentPath + "['" + edge.substr(2) + "']";
                                path = parentPath + pathDelim + edge.substr(2);
                                objectToPathPerOT[OT][objectId] = path;
                                return path;
                            }
                        }
                    }
                    console.error("NO PATH FOUND FOR OBJECT ID: " + objectId);
                }

                var reverseLookup = function(objectId) {
                    if (reverseObjectToId[objectId]) return reverseObjectToId[objectId];

                }

                var preProcess = function(OT){
                    var objectTree = OT == "this" ? objectTreeThis : invocationToArgProxy[OT].accessToPrivates().ObjectTree;
                    for (var nodeId in objectTree) {
                        var parentPath = constructPath(nodeId, OT);
                        if (!parentPath && parentPath != "") console.error("NO PARENT PATH FOUND WHILE PREPROCESSING " + nodeId );
                        for (var edge in objectTree[nodeId]) {
                            objectTree[nodeId][edge].forEach(function(objectId){
                                 if (!objectToPathPerOT.this[objectId]) {
                                    // var path = parentPath + "['" + edge.substr(2) + "']";
                                    var path = parentPath + pathDelim + edge.substr(2);
                                    objectToPathPerOT.this[objectId] = path;
                                }
                            })
                        }
                    }
                }

                var fetchValue = function(log){
                    var _id = parseInt(log);
                    if (!isNaN(_id))
                        return idToObject.get(_id);
                    else
                        return log.substr(2);
                }

                var getRootIds = function(readArr){
                    var ids = [];
                    readArr.forEach((read)=>{
                        ids.push(read[1]);
                    })
                    return [...new Set(ids)];
                }

                var getAllChildren = function(rootId,key){
                    var objectTreeNode = objectTreeThis[rootId];
                    if (!objectTreeNode) return [];

                    var children = objectTreeNode['e_' + key];
                    // FIX
                    /*all future reads from this object should be removed*/
                    return children || [];
                    return [];
                }

                var process = function(nodeId){
                    var arr = signature[nodeId], roots = [];
                    var writeObjs = {}, prunedInds = [], readsSeen = [],
                        writeObjsCh = [], readObjs = {};
                    arr.forEach(function(entry,ind){
                        //skip child placeholders
                        if (typeof entry == "string") return;
                        var type = entry[0];
                        if (type.indexOf(logType)<0) return;
                        var isWrite = type.indexOf("_reads")<0
                        var state = isWrite ? "write" : "read";
                        if (isWrite){
                            if (!writeObjs[entry[1]]){
                                writeObjs[entry[1]] = [];
                            }
                            writeObjs[entry[1]].push(entry[2]);
                            writeObjsCh = writeObjsCh.concat(getAllChildren(entry[1],entry[2]));
                        }
                        else if (writeObjs[entry[1]] && (writeObjs[entry[1]].indexOf(entry[2])>=0)
                            || writeObjsCh.indexOf(entry[1])>=0) {
                            prunedInds.push(ind);
                            return;
                        }
                        var sig = [type];
                        var OT = "this"
                        if (OT != "this")
                            preProcess(OT);
                        var parentPath = objectToPathPerOT[OT][entry[1]]
                        if (!parentPath && parentPath != "") console.log("no parent path found for object id:" + JSON.stringify(entry) + " " + nodeId);
                        try {
                            var str;
                            if (typeof entry[2] == 'symbol')
                                str = entry[2].toString()
                            else str = entry[2] + '';
                            var path = parentPath + pathDelim + str;
                            var val = entry[3];
                            // if (state == "write")
                            //     val = omniStringifier.stringify(val, state, 2);
                            sig[1] = path;
                            sig[2] = val;

                            //Special case while reading window
                            if (entry[4] === 0 && !isWrite) {
                                sig[1] += pathDelim + "self";
                                sig[2] = path;
                            }
                        } catch (e) {
                            //TODO
                            //suppressing for now
                            //SUPPRESS
                            throw e;
                            console.log("Error while trying to stringify path: " + e + e.stack);
                        }
                        if (sig) {
                            if (sig[0].indexOf("reads")>=0){
                                if (readsSeen.indexOf(sig[1])>=0)
                                    prunedInds.push(ind);
                                else readsSeen.push(sig[1]);
                            }
                            // if (detectProperty(readVal)) processedSig[nodeId].isFunction = true;
                            processedSig[nodeId][ind] = sig;
                        }
                    })
                    for (var i=prunedInds.length - 1;i>=0;i--)
                        processedSig[nodeId].splice(prunedInds[i],1);
                }

                var processWrite = function(nodeId){
                    var writeArray = signature[nodeId].filter(e=>e[0]==logType+"_writes");
                    writeArray.forEach(function(write){
                        var writeSignature = [logType+"_writes"];
                        var OT = "this"
                        if (OT != "this")
                            preProcess(OT);
                        var parentPath = objectToPathPerOT[OT][write[1]];
                        if (!parentPath && parentPath != "") console.log("no parent path found for object id:" + JSON.stringify(write) + " " + nodeId);
                        if (typeof write[2] == "symbol")
                            var path = parentPath + pathDelim + write[2].toString();
                        else var path = parentPath + pathDelim + write[2];
                        try {
                            var writeVal = write[3];
                            // writeSignature = path + " = omniStringifier.parse(`" + escapeRegExp(writeVal) +"`)";
                            writeSignature[1] = path;
                            writeSignature[2] = writeVal;
                        } catch (e) {
                            //TODO
                            //suppressing for now
                            //SUPPRESS
                            console.log("Error while stringifying path: " + e + e.stack);
                        }
                        if (writeSignature) {
                            // if (detectProperty(writeVal)) processedSig[nodeId].isFunction = true;
                            processedSig[nodeId].push(writeSignature);
                        }
                    })

                }

                //Generic function to detect a specific property of the signature
                var detectProperty = function(obj, property="function"){
                    if (typeof obj == "string")
                        return obj.split(';;').indexOf(property) >=0;
                    else if (typeof obj == property) return true;
                    else return false;
                }

                init();
                preProcess("this");
                //cleanup signatures ie remove a read after write
                // removeReduntantReads();

                Object.keys(this.signature).forEach(function(nodeId){
                    // Return if not leaf node
                    if (trackOnlyLeaf &&  callGraph[nodeId].length) {
                        // processedSig[nodeId] = "NonLeafNode";
                        return;
                    }
                    if (nodeId in nonCacheableNodes) return;
                    processedSig[nodeId] = signature[nodeId];
                    if (signature[nodeId].length)
                        process(nodeId)

                    //Remove redundant reads, ie reads with same keys

                    if (logType == "global"){
                        if (signature[nodeId].returnValue !== undefined) {
                            // var _ret = omniStringifier.stringify(signature[nodeId].returnValue,"write",2);
                            var _ret = signature[nodeId].returnValue
                            if (!(_ret instanceof Error)) {
                                processedSig[nodeId].push(['returnValue',_ret]);
                                // processedSig[nodeId].returnValue = _ret;
                            }
                            else delete processedSig[nodeId];

                        }
                        /***** HORCRUX *****/
                        signature[nodeId] &&  signature[nodeId].DOM_read && processedSig[nodeId] &&
                        (processedSig[nodeId].push(['DOM_read', signature[nodeId].DOM_read]));

                        signature[nodeId] &&  signature[nodeId].DOM_write && processedSig[nodeId] &&
                        (processedSig[nodeId].push(['DOM_write', signature[nodeId].DOM_write]));

                        signature[nodeId] &&  signature[nodeId].IBF && processedSig[nodeId] && (
                            processedSig[nodeId].push(['IBF',signature[nodeId].IBF]));

                        signature[nodeId] &&  signature[nodeId].ec && processedSig[nodeId] && (
                            processedSig[nodeId].push(['ec', signature[nodeId].ec]));

                        signature[nodeId] &&  signature[nodeId].CFG && processedSig[nodeId] && (
                            processedSig[nodeId].push(['CFG', signature[nodeId].CFG]));
                        // signature[nodeId] &&  signature[nodeId].startTime && processedSig[nodeId] && (
                        //     processedSig[nodeId].push(['startTime', signature[nodeId].startTime]));
                        // signature[nodeId] &&  signature[nodeId].endTime && processedSig[nodeId] && (
                        //     processedSig[nodeId].push(['endTime', signature[nodeId].endTime]));
                    }

                    // Object.keys(signature[nodeId]).forEach((key)=>{
                    //     if (!processedSig[nodeId][key]) {
                    //         // if (detectProperty(signature[nodeId][key])) processedSig[nodeId].isFunction = true;
                    //         processedSig[nodeId][key] = signature[nodeId][key];
                    //     }
                    // })
                });

            }

            postProcess() {
                var processedSig = this.processedSig;
                var callGraph = this.callGraph;
                var logType = this.logType;
                var _removeRedundantReads = function(keyArray){
                    var redundantIndices = [];
                    keyArray.forEach(key => {
                        var indices = keyArray.keys();
                        for (var i of indices) {
                            if (key.trim().indexOf(keyArray[i].trim()) >= 0 && keyArray[i].trim() != key.trim())
                                redundantIndices.push(i);
                        }
                    });

                    return [...(new Set(redundantIndices))]
                }

                var removeReduntantReads = function(nodeId){
                    var readArray = processedSig[nodeId][logType+"_reads"];
                    var keys = readArray.map(key => key.split('=')[0].trim());
                    var redundantIndices = _removeRedundantReads(keys);
                    for (var index = redundantIndices.length-1; index >= 0; index--)
                        readArray.splice(redundantIndices[index],1);
                    // redundantIndices.forEach(index => {
                    //     readArray.splice(index, 1);
                    // });
                }

                var removeReduntantReadsSimple = function(nodeId){
                    var readArray = processedSig[nodeId][logType+"_reads"];
                    processedSig[nodeId][logType+"_reads"] = [...new Set(readArray.map(e=>JSON.stringify(e)))].map(e=>JSON.parse(e));
                }

                Object.keys(processedSig).forEach(function(nodeId){
                    if (trackOnlyLeaf && callGraph[nodeId].length) return;
                    if (processedSig[nodeId][logType+"_reads"])
                        removeReduntantReadsSimple(nodeId);
                    // var readArray = processedSig[nodeId].reads;
                    // if (readArray && readArray.length) {
                    //     readArray = new Set(readArray);
                    //     processedSig[nodeId].reads = readArray;
                    // }
                    // var writeArray = processedSig[nodeId].writes;
                    // if (writeArray && writeArray.length) {
                    //     writeArray = new Set(writeArray);
                    //     processedSig[nodeId].writes = writeArray;
                    // }

                });
            }

            setPropagationData(pmd, proxyData, processedSig, nonCacheableNodes){
                this.PMD = pmd;
                this.proxyData = proxyData;
                this.processedSig = processedSig
                this.nonCacheableNodes = nonCacheableNodes;
            }
            /*
            Pseudo code
            - Traverse bottom up, for
            */
            signaturePropagate() {
                //Copy the call graph since we will be mutating it
                var callGraph = Object.assign({},this.callGraph);
                var processedSig = this.processedSig;
                var logType = this.logType;
                var pmd = this.PMD;
                var proxyData = this.proxyData;
                var nonCacheableNodes = this.nonCacheableNodes;

                var object2pathmem;
                var _getPathFromId = function(objectId, objectTree){
                    if (object2pathmem[objectId] != null) return object2pathmem[objectId];
                    for (var nodeId in objectTree){
                        for (var edge in objectTree[nodeId]) {
                            var _id = objectTree[nodeId][edge].indexOf(parseInt(objectId));
                            if (_id>=0) {
                                var parentPath = _getPathFromId(nodeId, objectTree);
                                // path = parentPath + "['" + edge.substr(2) + "']";
                                var path = parentPath + ";;;;" + edge.substr(2);
                                object2pathmem[objectId] = path;
                                return path;
                            }
                        }
                    }
                }

                var getPathFromId = function(objectId, functionId, stateType){
                    var proxyMap, newPath;
                    switch (stateType) {
                        case "argument" :
                            proxyMap = proxyData.i2a; break;
                        case "global" :
                            proxyMap = proxyData.gph; break;
                        case "this" :
                            proxyMap = proxyData.i2t; break;
                        case "closure":
                            proxyMap = proxyData.i2c; break;
                    }
                    var _proxyPrivates = (stateType == "global" ? globalProxyHandler : proxyMap[functionId])
                    if (!_proxyPrivates)
                        return new Error("Path not found while translating signature")
                    var proxyPrivates = _proxyPrivates.accessToPrivates();
                    object2pathmem = {0:""};
                    newPath = _getPathFromId(objectId, proxyPrivates.ObjectTree);
                    if (newPath == null){
                        return new Error("Path not found while translating signature")
                    }
                    return newPath
                }


                var translateSigInParentScope = function(parentNode, childNode, sigEntry, sigType){
                    var metadata = pmd[childNode];
                    var sigCat = sigEntry[0].split("_")[1];
                    if (sigType == "global" || sigType == "IBF") return Object.assign([],sigEntry);
                    if (!metadata[sigType] || !metadata[sigType].length)
                        return null;
                    var translatedEntry = [];
                    if (sigType == "argument") {
                        var mainArg = sigEntry[1].split(';;;;')[1];
                        var _matchMD = metadata[sigType].find(e=>e[0]==mainArg)
                        if (!_matchMD) return null;
                    } else
                        var _matchMD = metadata[sigType][0]
                    var newPath = getPathFromId(_matchMD[1],parentNode, _matchMD[2])
                    if (newPath && newPath.stack)
                        return newPath;
                    var newArg = _matchMD[2] + "_" + sigCat,
                        newKey = sigType == "argument" ? [newPath].concat(sigEntry[1].split(';;;;').slice(2,)).join(";;;;") :
                            newPath + sigEntry[1]
                    return [newArg, newKey, sigEntry[2]];
                }

                var rewriteKey = function(translatedSig, origSig, alreadyChildClosure){
                    var newKey = translatedSig[1].replace(origSig[1],"");
                    if (!alreadyChildClosure)
                        newKey = translatedSig[0].split("_")[0]  +  newKey   + ";&;" + origSig[1];
                    else newKey = translatedSig[0].split("_")[0]  +  newKey
                    return newKey;
                }

                //sigType = read or write
                var insertClosureSig = function(parentSig, insertInd, translatedSig, sigType, origSig, alreadyChildClosure){
                    var newSigType = sigType == "reads" ? "childClosure_reads" :
                        sigType == "IBF" ? "childIBF" : "childClosure_writes";
                    var newKey = rewriteKey(translatedSig, origSig,alreadyChildClosure);
                    var finalSig = [newSigType,newKey,translatedSig[2]];
                    parentSig.splice(insertInd,0,finalSig);
                }


                var _propagateHelper = function(sigEntry, parentNode, insertInd, childNode){
                    var sigType = sigEntry[0].split("_")[0],
                        parentSig = processedSig[parentNode];
                    switch(sigType){
                        case "global": parentSig.splice(insertInd, 0, sigEntry); break;
                        case "argument":
                        case "this":
                        case "closure":
                        case "IBF":
                            /*Handling IBF propagation similar to closure propagation*/
                            if (sigType == "IBF")
                                var translatedSig = translateSigInParentScope(parentNode, childNode, sigEntry, "closure")
                            else var translatedSig = translateSigInParentScope(parentNode, childNode, sigEntry, sigType)
                            if (translatedSig && !translatedSig.stack){
                                if (sigType == "closure"){
                                    insertClosureSig(parentSig, insertInd, translatedSig, sigEntry[0].split("_")[1], sigEntry)
                                    break;
                                } else if (sigType == "IBF"){
                                    insertClosureSig(parentSig, insertInd, translatedSig, "IBF", sigEntry)
                                    break;
                                }
                                parentSig.splice(insertInd, 0, translatedSig);
                            } else if (translatedSig && translatedSig.stack)
                                nonCacheableNodes[parentNode] = "translatedSig.message"
                            break;
                        case "childClosure":
                        case "childIBF":
                            var [childRef, actualKey] = sigEntry[1].split(';&;');
                            var dummySigType = childRef.split(';;;;')[0]+"_"+sigEntry[0].split("_")[1];
                            /*
                            if child accessed it through closure, simply append the key
                            however if the child accessed it through arguments or global, translate it accordingly
                            */
                            var childAccessor = "closure";
                            if (dummySigType.indexOf("argument")>=0 || dummySigType.indexOf("global")>=0){
                                childAccessor = "argument";
                                var dummySigEntry = [dummySigType, childRef.replace(childRef.split(';;;;')[0],""), sigEntry[2]];
                            }
                            else
                                var dummySigEntry = [dummySigType, "", sigEntry[2]];
                            var translatedSig = translateSigInParentScope(parentNode, childNode, dummySigEntry, childRef.split(';;;;')[0])
                            if (translatedSig && !translatedSig.stack){
                                    //fix the original reference part and the key part
                                    // translatedSig[1] = rewriteKey(translatedSig, dummySigEntry);
                                    //mimic the closure category, modify the key to include actualKey, without the state part
                                    if (childAccessor == "closure")
                                        translatedSig[1] += ';&;' + sigEntry[1];
                                    else dummySigEntry[1] = actualKey;
                                    //tweak the originalSig to simply reuse the insertClosureSig function
                                    // dummySigEntry[1]= actua.lKey
                                    var rwType = sigEntry[0].split("_")[1];
                                    if (sigType == "childIBF")
                                        rwType = "IBF"

                                    if (childAccessor == "closure")
                                        insertClosureSig(parentSig, insertInd, translatedSig, rwType, dummySigEntry, true)
                                    else
                                        insertClosureSig(parentSig, insertInd, translatedSig, rwType, dummySigEntry)
                            }

                    }
                }

                var propagateSig = function(parentNode, childNode){
                    var parentSig = processedSig[parentNode],
                        childSig = processedSig[childNode];
                    if (!parentSig || !childSig) return;
                    var phInd = parentSig.findIndex(e=>e==childNode),
                        cpPhInd = phInd;

                    if (phInd<0){
                        console.error("Parent node: " + parentNode + " has no placeholder for " + childNode );
                        return;
                    }
                    //Make space to insert childsig into parent sig
                    parentSig.splice(phInd,1)
                    childSig.forEach((sigEntry)=>{
                        var inserted = _propagateHelper(sigEntry,parentNode, phInd, childNode);
                        if (inserted)
                            phInd++
                    })
                    if (childSig.IBF){
                        var sigEntry = ["IBF", "", childSig.IBF]
                        var inserted = _propagateHelper(sigEntry,parentNode, phInd, childNode);
                        if (inserted)
                            phInd++
                    }
                    //Run optimizer after updating parent sig
                    // RWOpt(parentSig, cpPhInd);
                }

                var RWOpt = function(parentSig){
                    var cat2w = {}, //category to write
                        prunedInds = [],
                        readsSeen = {};
                    parentSig.forEach((entry,indx)=>{
                        var state = entry[0].split("_")[0];
                        if (!readsSeen[state])
                            readsSeen[state] = []
                        if (entry[0].indexOf("writes")>=0 ){
                            readsSeen[state].push(entry[1])
                            if (!cat2w[state])
                                cat2w[state] = [];
                            cat2w[state].push([entry[1],indx]) // state -> [key written to, index of the signature]
                        } else {
                            if (readsSeen[state].indexOf(entry[1])>=0 && prunedInds.indexOf(indx)<0)
                                prunedInds.push(indx)
                            else readsSeen[state].push(entry[1]);
                        }
                    })

                    parentSig.forEach((entry, indx)=>{
                            if (entry[0].indexOf("reads")>=0) {
                                var state = entry[0].split("_")[0];
                                if (!(state in cat2w)) return;
                                for (var write of cat2w[state]) {
                                    if (write[1] < indx && write[0].indexOf(entry[1])>=0 && prunedInds.indexOf(indx) < 0) {
                                        prunedInds.push(indx)
                                        break
                                    }
                                }
                            }
                    })
                    // Removing all the reads after writes
                    prunedInds = prunedInds.sort((b,a)=>{return b-a})
                    for (var i=prunedInds.length - 1;i>=0;i--)
                        parentSig.splice(prunedInds[i],1);

                }

                var updatedNodes = [];
                var visitChildren = function(parentNode){
                    if (updatedNodes.indexOf(parentNode)>=0) return;
                    var children = callGraph[parentNode];

                    for (var child of children){
                        visitChildren(child);
                        // console.log("Propagating " + child + " signature to " + parentNode)
                        if (child in nonCacheableNodes){
                            var childReason = nonCacheableNodes[child],
                                parentReason = "";
                            if (childReason.indexOf(";;")>=0){
                                parentReason = childReason;
                            } else {
                                parentReason += childReason + ";;parent-of-nc";
                            }
                            nonCacheableNodes[parentNode]=parentReason;
                            delete processedSig[parentNode]
                            updatedNodes.push(parentNode)
                            return;
                        }
                        propagateSig(parentNode,child);
                    }
                    updatedNodes.push(parentNode)
                }

                Object.keys(processedSig).forEach((parentNode)=>{
                    visitChildren(parentNode);
                })
                Object.keys(processedSig).forEach((parentNode)=>{
                    RWOpt(processedSig[parentNode]);
                })


            }
    }
    var setupStateEndTime = performance.now();
    window.top.setupStateTime[window.top.setupStateCounter++] = setupStateEndTime - setupStateStartTime;

    /*Set page loaded to true, since the initialization has happened
    and we need to turn off tracking for unnecessary functions*/
    // pageLoaded = false;
};

} /*else {
    __tracer = window.top.__tracer
}*/

/*if (typeof window === "undefined"){
    var globalProxyHandler = window.top.proxyEncapsulation(window,"global");

    var {proxy, revoke} = Proxy.revocable(window, globalProxyHandler);
    // Flag to disable proxy
    window = proxy;*
}*/

// (function () { __tracer.setGlobal(this); })();



</script>
<html lang="en-GB" dir="ltr" data-cast-api-enabled="true"><head><meta name="viewport" content="width=device-width, initial-scale=1"><style name="www-roboto" nonce="rlOnEIrPKMasaYHE0E7SaQ">@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu72xKOzY.woff2)format('woff2');unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu5mxKOzY.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu7mxKOzY.woff2)format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4WxKOzY.woff2)format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu7WxKOzY.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu7GxKOzY.woff2)format('woff2');unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;src:url(//fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fCRc4EsA.woff2)format('woff2');unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fABc4EsA.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fCBc4EsA.woff2)format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fBxc4EsA.woff2)format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fCxc4EsA.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fChc4EsA.woff2)format('woff2');unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;src:url(//fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fBBc4.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}</style><script name="www-roboto" nonce="0RJ1PUdOd1ax9OgG38dqmA">if (document.fonts && document.fonts.load) {document.fonts.load("400 10pt Roboto", "E"); document.fonts.load("500 10pt Roboto", "E");}</script><link rel="stylesheet" href="/s/player/e5f6cbd5/www-player.css" name="www-player" nonce="rlOnEIrPKMasaYHE0E7SaQ"><style nonce="rlOnEIrPKMasaYHE0E7SaQ">html {overflow: hidden;}body {font: 12px Roboto, Arial, sans-serif; background-color: #000; color: #fff; height: 100%; width: 100%; overflow: hidden; position: absolute; margin: 0; padding: 0;}#player {width: 100%; height: 100%;}h1 {text-align: center; color: #fff;}h3 {margin-top: 6px; margin-bottom: 3px;}.player-unavailable {position: absolute; top: 0; left: 0; right: 0; bottom: 0; padding: 25px; font-size: 13px; background: url(/img/meh7.png) 50% 65% no-repeat;}.player-unavailable .message {text-align: left; margin: 0 -5px 15px; padding: 0 5px 14px; border-bottom: 1px solid #888; font-size: 19px; font-weight: normal;}.player-unavailable a {color: #167ac6; text-decoration: none;}</style><script nonce="0RJ1PUdOd1ax9OgG38dqmA">
(function(){if (typeof __tracer == 'undefined' && typeof window != 'undefined')
                 { __tracer = window.top.__tracer;
                 }
                })();
var ytcsi={gt:function(n){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4614-1-4690",false);
n=(n||"")+"data_";return ytcsi[n]||(ytcsi[n]={tick:{},info:{}})
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4614-1-4690",true);
 }},now:window.performance&&window.performance.timing&&window.performance.now&&window.performance.timing.navigationStart?function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4808-1-4893",false);
return window.performance.timing.navigationStart+window.performance.now()
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4808-1-4893",true);
 }}:function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4894-1-4932",false);
return(new Date).getTime()
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4894-1-4932",true);
 }},tick:function(l,t,n){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4938-1-5085",false);
var ticks=ytcsi.gt(n).tick;var v=t||ytcsi.now();if(ticks[l]){ticks["_"+l]=ticks["_"+l]||[ticks[l]];ticks["_"+l].push(v)}ticks[l]=v
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-4938-1-5085",true);
 }},info:function(k,
v,n){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-5091-2-27",false);
ytcsi.gt(n).info[k]=v
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-1-5091-2-27",true);
 }},setStart:function(t,n){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-2-37-2-76",false);
ytcsi.tick("_start",t,n)
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-2-37-2-76",true);
 }}};
(function(w,d){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-1-5-333",false);
ytcsi.setStart(w.performance?w.performance.timing.responseStart:null);var isPrerender=(d.visibilityState||d.webkitVisibilityState)=="prerender";var vName=!d.visibilityState&&d.webkitVisibilityState?"webkitvisibilitychange":"visibilitychange";if(isPrerender){var startTick=function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-287-3-354",false);
ytcsi.setStart();d.removeEventListener(vName,startTick)
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-287-3-354",true);
 }};d.addEventListener(vName,startTick,false)}if(d.addEventListener)d.addEventListener(vName,function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-444-3-472",false);
ytcsi.tick("vc")
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-444-3-472",true);
 }},false);function isGecko(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-480-4-499",false);
if(!w.navigator)return false;
try{if(w.navigator.userAgentData&&w.navigator.userAgentData.brands&&w.navigator.userAgentData.brands.length){var brands=w.navigator.userAgentData.brands;for(var i=0;i<brands.length;i++)if(brands[i]&&brands[i].brand==="Firefox")return true;return false}}catch(e){setTimeout(function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-4-273-4-293",false);
throw e;
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-4-273-4-293",true);
 }})}if(!w.navigator.userAgent)return false;var ua=w.navigator.userAgent;return ua.indexOf("Gecko")>0&&ua.toLowerCase().indexOf("webkit")<0&&ua.indexOf("Edge")<0&&ua.indexOf("Trident")<0&&ua.indexOf("MSIE")<0
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-480-4-499",true);
 }}if(isGecko()){var isHidden=
(d.visibilityState||d.webkitVisibilityState)=="hidden";if(isHidden)ytcsi.tick("vc")}var slt=function(el,t){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-92-5-184",false);
setTimeout(function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-118-5-180",false);
var n=ytcsi.now();el.loadTime=n;if(el.slt)el.slt()
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-118-5-180",true);
 }},t)
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-92-5-184",true);
 }};w.__ytRIL=function(el){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-195-5-332",false);
if(!el.getAttribute("data-thumb"))if(w.requestAnimationFrame)w.requestAnimationFrame(function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-293-5-314",false);
slt(el,0)
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-293-5-314",true);
 }});else slt(el,16)
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-5-195-5-332",true);
 }}
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-1-function-3-1-5-333",true);
 }})(window,document);</script><script nonce="0RJ1PUdOd1ax9OgG38dqmA">
(function(){if (typeof __tracer == 'undefined' && typeof window != 'undefined')
                 { __tracer = window.top.__tracer;
                 }
                })();
var ytcfg={d:function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-61-6-132",false);
return window.yt&&yt.config_||ytcfg.data_||(ytcfg.data_={})
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-61-6-132",true);
 }},get:function(k,o){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-137-6-188",false);
return k in ytcfg.d()?ytcfg.d()[k]:o
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-137-6-188",true);
 }},set:function(){ 
 try {__tracer.cacheInit("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-193-6-299",false);
var a=arguments;if(a.length>1)ytcfg.d()[a[0]]=a[1];else for(var k in a[0])ytcfg.d()[k]=a[0][k]
 
 } finally {__tracer.exitFunction("/embed/OoDHM_A1axc?start=0&enablejsapi=1-script-2-function-6-193-6-299",true);
 }}};
ytcfg.set({"EVENT_ID":"fBi4Y4-ID8KwmgeQyKWwBg","EXPERIMENT_FLAGS":{"allow_skip_networkless":true,"always_send_and_write":true,"autoescape_tempdata_url":true,"background_thread_flush_logs_due_to_batch_limit":true,"cancel_pending_navs":true,"change_ad_badge_to_stark":true,"clear_user_partitioned_ls":true,"csi_on_gel":true,"deprecate_csi_has_info":true,"deprecate_pair_servlet_enabled":true,"deprecate_two_way_binding_child":true,"deprecate_two_way_binding_parent":true,"desktop_client_release":true,"desktop_image_cta_no_background":true,"desktop_log_img_click_location":true,"desktop_notification_high_priority_ignore_push":true,"desktop_notification_set_title_bar":true,"desktop_sparkles_light_cta_button":true,"disable_child_node_auto_formatted_strings":true,"disable_pacf_logging_for_memory_limited_tv":true,"disable_simple_mixed_direction_formatted_strings":true,"disable_thumbnail_preloading":true,"embeds_web_disable_ads_for_pfl":true,"embeds_web_enable_replace_unload_w_pagehide":true,"embeds_web_nwl_disable_nocookie":true,"enable_docked_chat_messages":true,"enable_innertube_home_debug_logging":true,"enable_mixed_direction_formatted_strings":true,"enable_pacf_through_ybfe_web_logging_for_page_top":true,"enable_skip_ad_guidance_prompt":true,"enable_skippable_ads_for_unplugged_ad_pod":true,"enable_sli_flush":true,"enable_third_party_info":true,"enable_watch_next_pause_autoplay_lact":true,"enable_ypc_spinners":true,"export_networkless_options":true,"fill_single_video_with_notify_to_lasr":true,"gfeedback_for_signed_out_users_enabled":true,"gpa_sparkles_ten_percent_layer":true,"h5_companion_enable_adcpn_macro_substitution_for_click_pings":true,"h5_inplayer_enable_adcpn_macro_substitution_for_click_pings":true,"h5_set_masthead_ads_asynchronously":true,"hide_endpoint_overflow_on_ytd_display_ad_renderer":true,"html5_control_flow_include_trigger_logging_in_tmp_logs":true,"html5_enable_ads_client_monitoring_log_tv":true,"html5_enable_single_video_vod_ivar_on_pacf":true,"html5_log_trigger_events_with_debug_data":true,"html5_web_enable_halftime_preroll":true,"il_use_view_model_logging_context":true,"is_browser_support_for_webcam_streaming":true,"json_condensed_response":true,"kevlar_dropdown_fix":true,"kevlar_gel_error_routing":true,"kevlar_guide_refresh":true,"live_chat_increased_min_height":true,"live_chat_use_new_emoji_picker":true,"log_errors_through_nwl_on_retry":true,"log_vis_on_tab_change":true,"log_web_endpoint_to_layer":true,"mdx_enable_privacy_disclosure_ui":true,"mdx_load_cast_api_bootstrap_script":true,"migrate_events_to_ts":true,"networkless_logging":true,"no_sub_count_on_sub_button":true,"nwl_send_from_memory_when_online":true,"pageid_as_header_web":true,"parse_query_data_from_url":true,"polymer_bad_build_labels":true,"polymer_verifiy_app_state":true,"qoe_send_and_write":true,"scheduler_use_raf_by_default":true,"service_worker_enabled":true,"service_worker_push_enabled":true,"service_worker_push_home_page_prompt":true,"service_worker_push_watch_page_prompt":true,"shorten_initial_gel_batch_timeout":true,"skip_invalid_ytcsi_ticks":true,"skip_setting_info_in_csi_data_object":true,"super_sticker_emoji_picker_category_button_icon_filled":true,"suppress_error_204_logging":true,"use_new_nwl_initialization":true,"use_new_nwl_saw":true,"use_new_nwl_stw":true,"use_new_nwl_wts":true,"use_player_abuse_bg_library":true,"use_request_time_ms_header":true,"use_session_based_sampling":true,"use_shared_nsm":true,"use_shared_nsm_and_keep_yt_online_updated":true,"use_ts_visibilitylogger":true,"use_watch_fragments2":true,"verify_ads_itag_early":true,"vss_final_ping_send_and_write":true,"vss_playback_use_send_and_write":true,"warm_load_nav_start_web":true,"web_always_load_chat_support":true,"web_api_url":true,"web_dedupe_ve_grafting":true,"web_enable_voz_audio_feedback":true,"web_gel_timeout_cap":true,"web_one_platform_error_handling":true,"web_prefetch_preload_video":true,"web_yt_config_context":true,"ytidb_clear_embedded_player":true,"H5_async_logging_delay_ms":1000.0,"addto_ajax_log_warning_fraction":0.1,"autoplay_pause_by_lact_sampling_fraction":0.0,"log_window_onerror_fraction":0.1,"tv_pacf_logging_sample_rate":0.01,"web_system_health_fraction":0.01,"ytidb_transaction_ended_event_rate_limit":0.02,"ytidb_transaction_ended_event_rate_limit_session":0.2,"ytidb_transaction_ended_event_rate_limit_transaction":0.1,"autoplay_pause_by_lact_sec":0,"botguard_async_snapshot_timeout_ms":3000,"check_navigator_accuracy_timeout_ms":0,"initial_gel_batch_timeout":2000,"log_web_meta_interval_ms":0,"max_prefetch_window_sec_for_livestream_optimization":0,"min_prefetch_offset_sec_for_livestream_optimization":10,"network_polling_interval":30000,"polymer_log_prop_change_observer_percent":0,"prefetch_comments_ms_after_video":0,"send_config_hash_timer":0,"service_worker_push_logged_out_prompt_watches":-1,"service_worker_push_prompt_cap":-1,"service_worker_push_prompt_delay_microseconds":3888000000000,"watch_next_pause_autoplay_lact_sec":4500,"web_foreground_heartbeat_interval_ms":28000,"web_gel_debounce_ms":10000,"web_logging_max_batch":100,"ytidb_remake_db_retries":3,"ytidb_reopen_db_retries":3,"embeds_web_synth_ch_headers_banned_urls_regex":"","live_chat_unicode_emoji_json_url":"https://www.gstatic.com/youtube/img/emojis/emojis-svg-9.json","service_worker_push_force_notification_prompt_tag":"1","service_worker_scope":"/","web_client_version_override":"","kevlar_command_handler_command_banlist":[],"web_op_signal_type_banlist":[]},"GAPI_HINT_PARAMS":"m;/_/scs/abc-static/_/js/k\u003dgapi.gapi.en.PlpnwD4HYro.O/d\u003d1/rs\u003dAHpOoo-D4573md5GmdJHX15d0lc3SoObhA/m\u003d__features__","GAPI_HOST":"https://apis.google.com","GAPI_LOCALE":"en_GB","GL":"IN","HL":"en-GB","HTML_LANG":"en-GB","INNERTUBE_API_KEY":"AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8","INNERTUBE_API_VERSION":"v1","INNERTUBE_CLIENT_NAME":"WEB_EMBEDDED_PLAYER","INNERTUBE_CLIENT_VERSION":"1.20230102.00.00","INNERTUBE_CONTEXT":{"client":{"hl":"en-GB","gl":"IN","remoteHost":"157.37.132.16","deviceMake":"","deviceModel":"","visitorData":"CgtfNmdiaDNhcFNQTSj8sOCdBg%3D%3D","userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36,gzip(gfe)","clientName":"WEB_EMBEDDED_PLAYER","clientVersion":"1.20230102.00.00","osName":"X11","osVersion":"","originalUrl":"https://www.youtube.com/embed/OoDHM_A1axc?start\u003d0\u0026enablejsapi\u003d1","platform":"DESKTOP","clientFormFactor":"UNKNOWN_FORM_FACTOR","configInfo":{"appInstallData":"CPyw4J0GELmQ_hIQgt2uBRDM364FEO3wrgUQh92uBRCI4a4FENnprgUQ1-SuBRC4i64FELKI_hIQqdyuBRC82q4FEI3K_RIQ2L6tBQ%3D%3D"},"browserName":"Chrome","browserVersion":"108.0.0.0","acceptHeader":"text/html,application/xhtml+xml,application/xml;q\u003d0.9,image/avif,image/webp,image/apng,*/*;q\u003d0.8,application/signed-exchange;v\u003db3;q\u003d0.9","deviceExperimentId":"ChxOekU0TlRVeU1ERXlOamMzTnpBNU9EZ3pOZz09EPyw4J0GGPyw4J0G"},"user":{"lockedSafetyMode":false},"request":{"useSsl":true},"clickTracking":{"clickTrackingParams":"IhMIj7b3nP2y/AIVQpjmCh0QZAlm"}},"INNERTUBE_CONTEXT_CLIENT_NAME":56,"INNERTUBE_CONTEXT_CLIENT_VERSION":"1.20230102.00.00","INNERTUBE_CONTEXT_GL":"IN","INNERTUBE_CONTEXT_HL":"en-GB","LATEST_ECATCHER_SERVICE_TRACKING_PARAMS":{"client.name":"WEB_EMBEDDED_PLAYER"},"SERVER_NAME":"WebFE","SESSION_INDEX":"","VISITOR_DATA":"CgtfNmdiaDNhcFNQTSj8sOCdBg%3D%3D","WEB_PLAYER_CONTEXT_CONFIGS":{"WEB_PLAYER_CONTEXT_CONFIG_ID_EMBEDDED_PLAYER":{"rootElementId":"movie_player","jsUrl":"/s/player/e5f6cbd5/player_ias.vflset/en_GB/base.js","cssUrl":"/s/player/e5f6cbd5/www-player.css","contextId":"WEB_PLAYER_CONTEXT_CONFIG_ID_EMBEDDED_PLAYER","eventLabel":"embedded","contentRegion":"IN","hl":"en_GB","hostLanguage":"en-GB","innertubeApiKey":"AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8","innertubeApiVersion":"v1","innertubeContextClientVersion":"1.20230102.00.00","device":{"brand":"","model":"","browser":"Chrome","browserVersion":"108.0.0.0","os":"X11","platform":"DESKTOP","interfaceName":"WEB_EMBEDDED_PLAYER","interfaceVersion":"1.20230102.00.00"},"serializedExperimentIds":"23983296,24002022,24002025,24004644,24007246,24080738,24135310,24151681,24169501,24292955,24406621,24415864,24416291,24434126,24439360,24441239","serializedExperimentFlags":"H5_async_logging_delay_ms\u003d1000.0\u0026active_view_stop_starting_measurement_on_loaded\u003dtrue\u0026ad_pod_disable_companion_persist_ads_quality\u003dtrue\u0026addto_ajax_log_warning_fraction\u003d0.1\u0026align_ad_to_video_player_lifecycle_for_bulleit\u003dtrue\u0026allow_live_autoplay\u003dtrue\u0026allow_poltergust_autoplay\u003dtrue\u0026allow_skip_networkless\u003dtrue\u0026always_send_and_write\u003dtrue\u0026autoplay_time\u003d10000\u0026autoplay_time_for_fullscreen\u003d-1\u0026autoplay_time_for_music_content\u003d-1\u0026av_call_early_terminal_event\u003dtrue\u0026av_call_every_user_event\u003dtrue\u0026av_call_once_per_event_pair\u003dtrue\u0026av_fix_measurable_dispatch\u003dtrue\u0026background_thread_flush_logs_due_to_batch_limit\u003dtrue\u0026bg_vm_reinit_threshold\u003d7200000\u0026blocked_packages_for_sps\u003d[]\u0026botguard_async_snapshot_timeout_ms\u003d3000\u0026change_ad_badge_to_stark\u003dtrue\u0026check_ad_ui_status_for_mweb_safari\u003dtrue\u0026check_navigator_accuracy_timeout_ms\u003d0\u0026clear_user_partitioned_ls\u003dtrue\u0026csi_on_gel\u003dtrue\u0026dash_manifest_version\u003d5\u0026debug_bandaid_hostname\u003d\u0026debug_sherlog_username\u003d\u0026delay_ads_gvi_call_on_bulleit_living_room_ms\u003d0\u0026deprecate_csi_has_info\u003dtrue\u0026deprecate_pair_servlet_enabled\u003dtrue\u0026deprecate_two_way_binding_child\u003dtrue\u0026deprecate_two_way_binding_parent\u003dtrue\u0026desktop_image_cta_no_background\u003dtrue\u0026desktop_log_img_click_location\u003dtrue\u0026desktop_player_button_tooltip_with_shortcut\u003dtrue\u0026desktop_sparkles_light_cta_button\u003dtrue\u0026disable_channel_id_check_for_suspended_channels\u003dtrue\u0026disable_child_node_auto_formatted_strings\u003dtrue\u0026disable_mdx_connection_in_mdx_module_for_music_web\u003dtrue\u0026disable_new_pause_state3\u003dtrue\u0026disable_pacf_logging_for_memory_limited_tv\u003dtrue\u0026disable_reduced_fullscreen_autoplay_countdown_for_minors\u003dtrue\u0026disable_rounding_ad_notify\u003dtrue\u0026disable_simple_mixed_direction_formatted_strings\u003dtrue\u0026disable_tabbing_before_flyout_ad_elements_appear\u003dtrue\u0026disable_thumbnail_preloading\u003dtrue\u0026embeds_enable_allow_watch_again_endscreen_for_eligible_shorts\u003dtrue\u0026embeds_enable_embed_module\u003dtrue\u0026embeds_enable_shorts_branded_ui\u003dtrue\u0026embeds_enable_shorts_links_for_eligible_shorts\u003dtrue\u0026embeds_web_disable_ads_for_pfl\u003dtrue\u0026embeds_web_enable_gws_wh_rel_off\u003dtrue\u0026embeds_web_enable_info_panel_preview\u003dtrue\u0026embeds_web_enable_load_player_from_page_show\u003dtrue\u0026embeds_web_enable_logging_event_handlers\u003dtrue\u0026embeds_web_enable_pem_domain_fix_for_ad_requests\u003dtrue\u0026embeds_web_enable_player_response_embeds_mode\u003dtrue\u0026embeds_web_enable_progress_bar_context_menu_fix\u003dtrue\u0026embeds_web_enable_replace_unload_w_pagehide\u003dtrue\u0026embeds_web_enable_video_data_refactoring_like_button_renderer\u003dtrue\u0026embeds_web_lite_mode\u003d1\u0026embeds_web_nwl_disable_nocookie\u003dtrue\u0026embeds_web_synth_ch_headers_banned_urls_regex\u003d\u0026enable_ad_cpn_macro_substitution_for_click_pings\u003dtrue\u0026enable_cast_for_web_unplugged\u003dtrue\u0026enable_cast_on_music_web\u003dtrue\u0026enable_client_page_id_header_for_first_party_pings\u003dtrue\u0026enable_cookie_reissue_iframe\u003dtrue\u0026enable_error_corrections_infocard_web_client\u003dtrue\u0026enable_error_corrections_infocards_icon_web\u003dtrue\u0026enable_eviction_protection_for_bulleit\u003dtrue\u0026enable_inline_preview_controls\u003dtrue\u0026enable_innertube_home_debug_logging\u003dtrue\u0026enable_live_premiere_web_player_indicator\u003dtrue\u0026enable_macro_substitution_on_html5\u003dtrue\u0026enable_mixed_direction_formatted_strings\u003dtrue\u0026enable_mweb_livestream_ui_update\u003dtrue\u0026enable_new_paid_product_placement\u003dtrue\u0026enable_pacf_through_ybfe_web_logging_for_page_top\u003dtrue\u0026enable_post_ad_perception_survey_in_tvhtml5\u003dtrue\u0026enable_precise_embargos\u003dtrue\u0026enable_skip_ad_guidance_prompt\u003dtrue\u0026enable_skippable_ads_for_unplugged_ad_pod\u003dtrue\u0026enable_sli_flush\u003dtrue\u0026enable_third_party_info\u003dtrue\u0026enable_web_media_session_metadata_fix\u003dtrue\u0026error_message_for_gsuite_network_restrictions\u003dtrue\u0026export_networkless_options\u003dtrue\u0026external_fullscreen_with_edu\u003dtrue\u0026fast_autonav_in_background\u003dtrue\u0026fill_single_video_with_notify_to_lasr\u003dtrue\u0026filter_vp9_for_csdai\u003dtrue\u0026filter_vp9_for_live_dai\u003dtrue\u0026fix_ads_tracking_for_swf_config_deprecation_mweb\u003dtrue\u0026gpa_sparkles_ten_percent_layer\u003dtrue\u0026gvi_channel_client_screen\u003dtrue\u0026h5_companion_enable_adcpn_macro_substitution_for_click_pings\u003dtrue\u0026h5_inplayer_enable_adcpn_macro_substitution_for_click_pings\u003dtrue\u0026h5_set_masthead_ads_asynchronously\u003dtrue\u0026hfr_dropped_framerate_fallback_threshold\u003d0\u0026hide_endpoint_overflow_on_ytd_display_ad_renderer\u003dtrue\u0026html5_ad_timeout_ms\u003d0\u0026html5_ads_preroll_lock_timeout_delay_ms\u003d15000\u0026html5_allow_discontiguous_slices\u003dtrue\u0026html5_allow_missing_ad_duration_in_player_vars\u003dtrue\u0026html5_allow_video_keyframe_without_audio\u003dtrue\u0026html5_append_init_while_paused\u003dtrue\u0026html5_apply_ustreamer_cap_per_video_id\u003dtrue\u0026html5_att_oauth\u003dtrue\u0026html5_attach_num_random_bytes_to_bandaid\u003d0\u0026html5_attach_po_token_to_bandaid\u003dtrue\u0026html5_autonav_cap_idle_secs\u003d0\u0026html5_autonav_quality_cap\u003d720\u0026html5_autoplay_default_quality_cap\u003d0\u0026html5_block_pip_safari_delay\u003d0\u0026html5_bmff_new_fourcc_check\u003dtrue\u0026html5_cap_quality_for_tv_hfr\u003dtrue\u0026html5_change_player_mode_order_for_logging\u003dtrue\u0026html5_clamp_cuepoints_to_min\u003dtrue\u0026html5_cobalt_max_size_for_immed_job\u003d0\u0026html5_cobalt_min_processor_cnt_to_offload_algo\u003d0\u0026html5_cobalt_override_quic\u003d0\u0026html5_control_flow_include_trigger_logging_in_tmp_logs\u003dtrue\u0026html5_create_manifest_from_protos\u003dtrue\u0026html5_de_dupe_content_video_loads_in_lifecycle_api\u003dtrue\u0026html5_deadzone_multiplier\u003d1.0\u0026html5_debug_data_log_probability\u003d0.1\u0026html5_decode_to_texture_cap\u003dtrue\u0026html5_decoder_freeze_timeout_delay_ms\u003d0\u0026html5_default_ad_gain\u003d0.5\u0026html5_default_quality_cap\u003d0\u0026html5_defer_ad_module_ms\u003d0\u0026html5_defer_fetch_att_ms\u003d0\u0026html5_defer_modules_delay_time_millis\u003d0\u0026html5_delay_initial_loading\u003dtrue\u0026html5_delay_retries_for_host_timeout\u003dtrue\u0026html5_delayed_retry_count\u003d1\u0026html5_delayed_retry_delay_ms\u003d5000\u0026html5_deprecate_video_tag_pool\u003dtrue\u0026html5_desktop_vr180_allow_panning\u003dtrue\u0026html5_desync_cue_range_threshold\u003d0\u0026html5_df_downgrade_thresh\u003d0.2\u0026html5_disable_connection_issue_event\u003dtrue\u0026html5_disable_csi_for_bulleit\u003dtrue\u0026html5_disable_move_pssh_to_moov\u003dtrue\u0026html5_disable_non_contiguous\u003dtrue\u0026html5_displayed_frame_rate_downgrade_threshold\u003d45\u0026html5_drm_check_all_key_error_states\u003dtrue\u0026html5_drm_cpi_license_key\u003dtrue\u0026html5_early_read_chunk\u003dtrue\u0026html5_enable_ac3\u003dtrue\u0026html5_enable_ads_client_monitoring_log_tv\u003dtrue\u0026html5_enable_atv_offline\u003dtrue\u0026html5_enable_client_hints_override\u003dtrue\u0026html5_enable_deferred_triggers_on_error\u003dtrue\u0026html5_enable_eac3\u003dtrue\u0026html5_enable_embedded_player_visibility_signals\u003dtrue\u0026html5_enable_non_notify_composite_vod_lsar_pacf\u003dtrue\u0026html5_enable_single_video_vod_ivar_on_pacf\u003dtrue\u0026html5_enable_tvos_dash\u003dtrue\u0026html5_enable_tvos_encrypted_vp9\u003dtrue\u0026html5_enable_vod_lsar_ivar_pacf_unplugged\u003dtrue\u0026html5_enable_widevine_for_alc\u003dtrue\u0026html5_enable_widevine_for_fast_linear\u003dtrue\u0026html5_encourage_array_coalescing\u003dtrue\u0026html5_exile_on_drm_fatal\u003dtrue\u0026html5_fill_isTypeSupported_capability_cache_earlier\u003dtrue\u0026html5_fix_csi_event_order_in_pacf\u003dtrue\u0026html5_fludd_suspend\u003dtrue\u0026html5_flush_segment_index_on_error\u003dtrue\u0026html5_flush_vss_with_rti_and_rtn\u003dtrue\u0026html5_gapless_ended_transition_buffer_ms\u003d200\u0026html5_gapless_preloading\u003dtrue\u0026html5_generate_session_po_token\u003dtrue\u0026html5_gl_fps_threshold\u003d0\u0026html5_halt_ssdai_fetch_on_predict_start\u003dtrue\u0026html5_hdcp_probing_stream_url\u003d\u0026html5_heartbeat_set_ended\u003dtrue\u0026html5_hfr_quality_cap\u003d0\u0026html5_high_res_logging_percent\u003d0.01\u0026html5_idle_rate_limit_ms\u003d0\u0026html5_ignore_media_element_event_loadeddata\u003dtrue\u0026html5_innertube_heartbeats_for_fairplay\u003dtrue\u0026html5_innertube_heartbeats_for_playready\u003dtrue\u0026html5_innertube_heartbeats_for_widevine\u003dtrue\u0026html5_ios4_seek_above_zero\u003dtrue\u0026html5_ios7_force_play_on_stall\u003dtrue\u0026html5_ios_force_seek_to_zero_on_stop\u003dtrue\u0026html5_jumbo_mobile_subsegment_readahead_target\u003d3.0\u0026html5_jumbo_ull_nonstreaming_mffa_ms\u003d4000\u0026html5_jumbo_ull_subsegment_readahead_target\u003d1.3\u0026html5_license_constraint_delay\u003d5000\u0026html5_live_abr_head_miss_fraction\u003d0.0\u0026html5_live_abr_repredict_fraction\u003d0.0\u0026html5_live_byterate_factor_for_readahead\u003d1.3\u0026html5_live_low_latency_bandwidth_window\u003d0.0\u0026html5_live_normal_latency_bandwidth_window\u003d0.0\u0026html5_live_partial_response_resumable\u003dtrue\u0026html5_live_quality_cap\u003d0\u0026html5_live_ultra_low_latency_bandwidth_window\u003d0.0\u0026html5_log_audio_abr\u003dtrue\u0026html5_log_experiment_id_from_player_response_to_ctmp\u003d\u0026html5_log_first_ssdai_requests_killswitch\u003dtrue\u0026html5_log_offline_playback_started_event\u003dtrue\u0026html5_log_readahead_on_playback_start\u003dtrue\u0026html5_log_rebuffer_events\u003d5\u0026html5_log_server_url_param\u003dtrue\u0026html5_log_trigger_events_with_debug_data\u003dtrue\u0026html5_long_rebuffer_jiggle_cmt_delay_ms\u003d0\u0026html5_long_rebuffer_new_elem_shorts_delay_ms\u003d0\u0026html5_long_rebuffer_threshold_ms\u003d30000\u0026html5_manifestless_seg_drift_limit_secs\u003d0\u0026html5_manifestless_unplugged\u003dtrue\u0026html5_manifestless_vp9_otf\u003dtrue\u0026html5_max_drift_per_track_secs\u003d0.0\u0026html5_max_headm_for_streaming_xhr\u003d0\u0026html5_max_live_dvr_window_plus_margin_secs\u003d46800.0\u0026html5_max_readbehind_secs\u003d0\u0026html5_max_redirect_response_length\u003d8192\u0026html5_max_selectable_quality_ordinal\u003d0\u0026html5_maximum_readahead_seconds\u003d0.0\u0026html5_media_fullscreen\u003dtrue\u0026html5_mfl_extend_max_request_time\u003dtrue\u0026html5_min_readbehind_cap_secs\u003d60\u0026html5_min_readbehind_secs\u003d0\u0026html5_min_selectable_quality_ordinal\u003d0\u0026html5_min_startup_buffered_ad_media_duration_secs\u003d1.2\u0026html5_min_startup_buffered_media_duration_secs\u003d1.2\u0026html5_minimum_readahead_seconds\u003d0.0\u0026html5_new_min_startup_smooth_logic\u003dtrue\u0026html5_no_placeholder_rollbacks\u003dtrue\u0026html5_non_network_rebuffer_duration_ms\u003d0\u0026html5_non_onesie_attach_po_token\u003dtrue\u0026html5_not_register_disposables_when_core_listens\u003dtrue\u0026html5_offline_failure_retry_limit\u003d2\u0026html5_onesie_cast\u003dtrue\u0026html5_onesie_defer_content_loader_ms\u003d0\u0026html5_onesie_disable_js_cleartext_compression\u003dtrue\u0026html5_onesie_enable_server_side_badwidth_estimation\u003dtrue\u0026html5_onesie_host_racing_cap_ms\u003d0\u0026html5_onesie_ignore_innertube_api_key\u003dtrue\u0026html5_onesie_live_ttl_secs\u003d8\u0026html5_onesie_media_bytes\u003dtrue\u0026html5_onesie_nonzero_playback_start\u003dtrue\u0026html5_onesie_notify_cuepoint_manager_on_completion\u003dtrue\u0026html5_onesie_prefer_trusted_host\u003dtrue\u0026html5_onesie_prewarm_cooldown_ms\u003d0\u0026html5_onesie_prewarm_interval_ms\u003d0\u0026html5_onesie_prewarm_max_lact_ms\u003d0\u0026html5_onesie_redirector_timeout_ms\u003d0\u0026html5_onesie_request_timeout_ms\u003d1000\u0026html5_onesie_sticky_server_side\u003dtrue\u0026html5_pause_on_nonforeground_platform_errors\u003dtrue\u0026html5_peak_shave\u003dtrue\u0026html5_per_format_loudness_fix\u003dtrue\u0026html5_perf_cap_override_sticky\u003dtrue\u0026html5_performance_cap_floor\u003d360\u0026html5_performance_impact_profiling_timer_ms\u003d0\u0026html5_perserve_av1_perf_cap\u003dtrue\u0026html5_photos_use_vp9_otf\u003dtrue\u0026html5_platform_minimum_readahead_seconds\u003d0.0\u0026html5_platform_whitelisted_for_frame_accurate_seeks\u003dtrue\u0026html5_player_autonav_logging\u003dtrue\u0026html5_player_dynamic_bottom_gradient\u003dtrue\u0026html5_player_min_build_cl\u003d-1\u0026html5_post_interrupt_readahead\u003d20\u0026html5_prefer_server_bwe3\u003dtrue\u0026html5_preload_wait_time_secs\u003d0.0\u0026html5_probe_primary_delay_base_ms\u003d0\u0026html5_process_all_encrypted_events\u003dtrue\u0026html5_query_sw_secure_crypto_for_android\u003dtrue\u0026html5_random_playback_cap\u003d0\u0026html5_readahead_ratelimit\u003d3000\u0026html5_recover_from_non_fatal_errors_in_player_bytes\u003dtrue\u0026html5_reduce_istypesupported_calls\u003dtrue\u0026html5_remove_command_triggered_companions\u003dtrue\u0026html5_remove_not_servable_check_killswitch\u003dtrue\u0026html5_rename_apbs\u003dtrue\u0026html5_report_fatal_drm_restricted_error_killswitch\u003dtrue\u0026html5_report_slow_ads_as_error\u003dtrue\u0026html5_request_only_hdr_or_sdr_keys\u003dtrue\u0026html5_request_sizing_multiplier\u003d0.8\u0026html5_require_hdr_capability\u003dtrue\u0026html5_resource_bad_status_delay_scaling\u003d1.5\u0026html5_restrict_streaming_xhr_on_sqless_requests\u003dtrue\u0026html5_safari_desktop_eme_min_version\u003d0\u0026html5_seek_jiggle_cmt_delay_ms\u003d8000\u0026html5_seek_new_elem_delay_ms\u003d12000\u0026html5_seek_over_discontinuities_delay_ms\u003d0\u0026html5_seek_set_cmt_delay_ms\u003d2000\u0026html5_seek_timeout_delay_ms\u003d20000\u0026html5_selectable_formats_early_exit\u003dtrue\u0026html5_server_stitched_dai_decorated_url_retry_limit\u003d5\u0026html5_session_po_token_interval_time_ms\u003d900000\u0026html5_set_ended_in_pfx_live\u003dtrue\u0026html5_simplify_streaming_xhr\u003dtrue\u0026html5_skip_oob_start_seconds\u003dtrue\u0026html5_skip_slow_ad_delay_ms\u003d15000\u0026html5_skip_sub_quantum_discontinuity_secs\u003d0.0\u0026html5_slow_start_no_media_source_delay_ms\u003d0\u0026html5_slow_start_timeout_delay_ms\u003d20000\u0026html5_ssdai_enable_new_seek_logic\u003dtrue\u0026html5_ssdai_flush_vss\u003dtrue\u0026html5_ssdai_vss_player_state_change\u003dtrue\u0026html5_start_seconds_reorder\u003dtrue\u0026html5_stateful_audio_min_adjustment_value\u003d0\u0026html5_static_abr_resolution_shelf\u003d0\u0026html5_store_xhr_headers_readable\u003dtrue\u0026html5_stream_metadata\u003dtrue\u0026html5_streaming_init_requests_sizes\u003d0\u0026html5_subsegment_readahead_load_speed_check_interval\u003d0.5\u0026html5_subsegment_readahead_min_buffer_health_secs\u003d0.25\u0026html5_subsegment_readahead_min_buffer_health_secs_on_timeout\u003d0.1\u0026html5_subsegment_readahead_min_load_speed\u003d1.5\u0026html5_subsegment_readahead_seek_latency_fudge\u003d0.5\u0026html5_subsegment_readahead_target_buffer_health_secs\u003d0.5\u0026html5_subsegment_readahead_timeout_secs\u003d2.0\u0026html5_suspend_loader\u003dtrue\u0026html5_track_termination_during_request\u003dtrue\u0026html5_ugc_live_audio_51\u003dtrue\u0026html5_ugc_vod_audio_51\u003dtrue\u0026html5_ultra_high_res_logging_percent\u003d0.0\u0026html5_unreported_seek_reseek_delay_ms\u003d0\u0026html5_update_constraint\u003dtrue\u0026html5_use_post_for_media\u003dtrue\u0026html5_varispeed_playback_rate\u003dtrue\u0026html5_video_tbd_min_kb\u003d0\u0026html5_viewport_undersend_maximum\u003d0.0\u0026html5_watchdog_for_zero_seek\u003dtrue\u0026html5_web_enable_halftime_preroll\u003dtrue\u0026html5_webpo_idle_priority_job\u003dtrue\u0026html5_woffle_resume\u003dtrue\u0026html5_workaround_delay_trigger\u003dtrue\u0026html5_xhr_clean_up_multi_slice_facade\u003dtrue\u0026html5_ytvlr_enable_single_select_survey\u003dtrue\u0026il_use_view_model_logging_context\u003dtrue\u0026initial_gel_batch_timeout\u003d2000\u0026injected_license_handler_error_code\u003d0\u0026injected_license_handler_license_status\u003d0\u0026json_condensed_response\u003dtrue\u0026kevlar_command_handler_command_banlist\u003d[]\u0026kevlar_dropdown_fix\u003dtrue\u0026kevlar_gel_error_routing\u003dtrue\u0026kevlar_miniplayer\u003dtrue\u0026kevlar_miniplayer_expand_top\u003dtrue\u0026kevlar_miniplayer_play_pause_on_scrim\u003dtrue\u0026kevlar_playback_associated_queue\u003dtrue\u0026kevlar_queue_use_update_api\u003dtrue\u0026live_chunk_readahead\u003d3\u0026live_fresca_v2\u003dtrue\u0026log_errors_through_nwl_on_retry\u003dtrue\u0026log_web_endpoint_to_layer\u003dtrue\u0026log_window_onerror_fraction\u003d0.1\u0026manifestless_post_live\u003dtrue\u0026manifestless_post_live_ufph\u003dtrue\u0026max_prefetch_window_sec_for_livestream_optimization\u003d0\u0026max_resolution_for_white_noise\u003d360\u0026mdx_enable_privacy_disclosure_ui\u003dtrue\u0026mdx_load_cast_api_bootstrap_script\u003dtrue\u0026migrate_events_to_ts\u003dtrue\u0026min_prefetch_offset_sec_for_livestream_optimization\u003d10\u0026music_enable_shared_audio_tier_logic\u003dtrue\u0026mweb_c3_endscreen\u003dtrue\u0026mweb_enable_custom_control_shared\u003dtrue\u0026mweb_enable_skippables_on_jio_phone\u003dtrue\u0026mweb_muted_autoplay_animation\u003dshrink\u0026mweb_native_control_in_faux_fullscreen_shared\u003dtrue\u0026network_polling_interval\u003d30000\u0026networkless_logging\u003dtrue\u0026new_codecs_string_api_uses_legacy_style\u003dtrue\u0026nwl_send_from_memory_when_online\u003dtrue\u0026pageid_as_header_web\u003dtrue\u0026parse_query_data_from_url\u003dtrue\u0026player_ads_set_adformat_on_client\u003dtrue\u0026player_allow_autonav_after_playlist\u003dtrue\u0026player_bootstrap_method\u003dtrue\u0026player_defer_caption_display\u003d1000\u0026player_destroy_old_version\u003dtrue\u0026player_enable_playback_playlist_change\u003dtrue\u0026player_endscreen_ellipsis_fix\u003dtrue\u0026player_underlay_min_player_width\u003d768.0\u0026player_underlay_video_width_fraction\u003d0.6\u0026player_web_canary_stage\u003d0\u0026playready_first_play_expiration\u003d-1\u0026polymer_bad_build_labels\u003dtrue\u0026polymer_log_prop_change_observer_percent\u003d0\u0026polymer_verifiy_app_state\u003dtrue\u0026preskip_button_style_ads_backend\u003d\u0026qoe_nwl_downloads\u003dtrue\u0026qoe_send_and_write\u003dtrue\u0026replace_playability_retriever_in_watch\u003dtrue\u0026scheduler_use_raf_by_default\u003dtrue\u0026self_podding_header_string_template\u003dself_podding_interstitial_message\u0026self_podding_highlight_non_default_button\u003dtrue\u0026self_podding_midroll_choice_string_template\u003dself_podding_midroll_choice\u0026send_config_hash_timer\u003d0\u0026short_start_time_prefer_publish_in_watch_log\u003dtrue\u0026shorten_initial_gel_batch_timeout\u003dtrue\u0026skip_inline_muted_license_service_check\u003dtrue\u0026skip_invalid_ytcsi_ticks\u003dtrue\u0026skip_setting_info_in_csi_data_object\u003dtrue\u0026streaming_data_emergency_itag_blacklist\u003d[]\u0026suppress_error_204_logging\u003dtrue\u0026tv_pacf_logging_sample_rate\u003d0.01\u0026tvhtml5_unplugged_preload_cache_size\u003d5\u0026unplugged_tvhtml5_video_preload_on_focus_delay_ms\u003d0\u0026use_inlined_player_rpc\u003dtrue\u0026use_new_nwl_initialization\u003dtrue\u0026use_new_nwl_saw\u003dtrue\u0026use_new_nwl_stw\u003dtrue\u0026use_new_nwl_wts\u003dtrue\u0026use_player_abuse_bg_library\u003dtrue\u0026use_profilepage_event_label_in_carousel_playbacks\u003dtrue\u0026use_request_time_ms_header\u003dtrue\u0026use_session_based_sampling\u003dtrue\u0026use_shared_nsm\u003dtrue\u0026use_shared_nsm_and_keep_yt_online_updated\u003dtrue\u0026use_ts_visibilitylogger\u003dtrue\u0026variable_buffer_timeout_ms\u003d0\u0026verify_ads_itag_early\u003dtrue\u0026vp9_drm_live\u003dtrue\u0026vss_final_ping_send_and_write\u003dtrue\u0026vss_playback_use_send_and_write\u003dtrue\u0026web_api_url\u003dtrue\u0026web_client_version_override\u003d\u0026web_dedupe_ve_grafting\u003dtrue\u0026web_enable_voz_audio_feedback\u003dtrue\u0026web_foreground_heartbeat_interval_ms\u003d28000\u0026web_gel_debounce_ms\u003d10000\u0026web_gel_timeout_cap\u003dtrue\u0026web_logging_max_batch\u003d100\u0026web_modern_buttons_bl_survey\u003dtrue\u0026web_modern_subscribe_style\u003dfilled\u0026web_one_platform_error_handling\u003dtrue\u0026web_op_signal_type_banlist\u003d[]\u0026web_playback_associated_log_ctt\u003dtrue\u0026web_playback_associated_ve\u003dtrue\u0026web_player_api_logging_fraction\u003d0.01\u0026web_player_autonav_toggle_always_listen\u003dtrue\u0026web_player_caption_language_preference_stickiness_duration\u003d0\u0026web_player_decouple_autonav\u003dtrue\u0026web_player_enable_early_warning_snackbar\u003dtrue\u0026web_player_gvi_wexit_adunit\u003dtrue\u0026web_player_gvi_wexit_all_player_styles\u003dtrue\u0026web_player_gvi_wexit_living_room_bedrock\u003dtrue\u0026web_player_gvi_wexit_living_room_kids\u003dtrue\u0026web_player_gvi_wexit_living_room_other\u003dtrue\u0026web_player_gvi_wexit_living_room_pangea\u003dtrue\u0026web_player_gvi_wexit_living_room_simply\u003dtrue\u0026web_player_gvi_wexit_living_room_unplugged\u003dtrue\u0026web_player_innertube_playlist_update\u003dtrue\u0026web_player_ipp_canary_type_for_logging\u003d\u0026web_player_live_monitor_env\u003dtrue\u0026web_player_music_visualizer_treatment\u003dfake\u0026web_player_mutable_event_label\u003dtrue\u0026web_player_no_force_gvi\u003dtrue\u0026web_player_response_playback_tracking_parsing\u003dtrue\u0026web_player_seek_chapters_by_shortcut\u003dtrue\u0026web_player_sentinel_is_uniplayer\u003dtrue\u0026web_player_should_honor_include_asr_setting\u003dtrue\u0026web_player_show_music_in_this_video_graphic\u003dvideo_thumbnail\u0026web_player_ss_dai_ad_fetching_timeout_ms\u003d15000\u0026web_player_ss_media_time_offset\u003dtrue\u0026web_player_ss_timeout_skip_ads\u003dtrue\u0026web_player_ssdai_all_acpns_aids_logging_killswitch\u003dtrue\u0026web_player_touch_mode_improvements\u003dtrue\u0026web_player_transfer_timeout_threshold_ms\u003d10800000\u0026web_player_unset_default_csn_killswitch\u003dtrue\u0026web_player_use_cinematic_label_2\u003dtrue\u0026web_player_use_new_api_for_quality_pullback\u003dtrue\u0026web_player_vss_pageid_header\u003dtrue\u0026web_player_watch_next_response\u003dtrue\u0026web_player_watch_next_response_parsing\u003dtrue\u0026web_prefetch_preload_video\u003dtrue\u0026web_repeating_chapters\u003dtrue\u0026web_yt_config_context\u003dtrue\u0026woffle_clean_up_after_entity_migration\u003dtrue\u0026ytidb_clear_embedded_player\u003dtrue\u0026ytidb_remake_db_retries\u003d3\u0026ytidb_reopen_db_retries\u003d3\u0026ytidb_transaction_ended_event_rate_limit\u003d0.02\u0026ytidb_transaction_ended_event_rate_limit_session\u003d0.2\u0026ytidb_transaction_ended_event_rate_limit_transaction\u003d0.1","startMuted":false,"enableMutedAutoplay":false,"mobileIphoneSupportsInlinePlayback":true,"isMobileDevice":false,"cspNonce":"0RJ1PUdOd1ax9OgG38dqmA","canaryState":"none","enableCsiLogging":true,"loaderUrl":"https://www.nytimes.com/","disableAutonav":false,"isEmbed":true,"embedOptOutDeprecation":false,"disableCastApi":false,"disableMdxCast":false,"datasyncId":"V4c1c8a03||","embedsEnablePfpImaIntegration":false,"embedsEnableAppendUtmParams":false,"embedsDisableInfoPanels":false}},"XSRF_FIELD_NAME":"session_token","XSRF_TOKEN":"QUFFLUhqbWo3S2tJYVZfc0t2dlFwVTZsc3dhbkoyWWpoZ3xBQ3Jtc0ttQjctQ2FGRy1WQmRNVGpUUkpJRElRcWJPVEhCZzJWTDNyVjJKUnJDVWt5SHB1QVdtNDI3TjdGeERYN0pnZDJkS0Rla184bU9EbHRpeFpxanJXcEVFc2hURGg0MG5SX0ZpUGw1OWJtRzFXbWZ4NmZJYw\u003d\u003d","SERVER_VERSION":"prod","DATASYNC_ID":"V4c1c8a03||","SERIALIZED_CLIENT_CONFIG_DATA":"CPyw4J0GELmQ_hIQgt2uBRDM364FEO3wrgUQh92uBRCI4a4FENnprgUQ1-SuBRC4i64FELKI_hIQqdyuBRC82q4FEI3K_RIQ2L6tBQ%3D%3D","ROOT_VE_TYPE":16623,"CLIENT_PROTOCOL":"HTTP/1.1","CLIENT_TRANSPORT":"tcp","TIME_CREATED_MS":1673009276261,"VALID_SESSION_TEMPDATA_DOMAINS":["www.youtube.com","studio.youtube.com","m.youtube.com"],"ENABLE_JS_API":true,"PLAYER_VARS":{"embedded_player_response":"{\"responseContext\":{\"serviceTrackingParams\":[{\"service\":\"CSI\",\"params\":[{\"key\":\"c\",\"value\":\"WEB_EMBEDDED_PLAYER\"},{\"key\":\"cver\",\"value\":\"1.20230102.00.00\"},{\"key\":\"yt_li\",\"value\":\"0\"},{\"key\":\"GetEmbeddedPlayer_rid\",\"value\":\"0xf17e6c6137cd98e1\"}]},{\"service\":\"GFEEDBACK\",\"params\":[{\"key\":\"logged_in\",\"value\":\"0\"},{\"key\":\"country-type\",\"value\":\"B\"},{\"key\":\"e\",\"value\":\"1714240,23804281,23882685,23918597,23934970,23946420,23966208,23983296,23998056,24002022,24002025,24004644,24007246,24034168,24036947,24077241,24080738,24108448,24120819,24135310,24140247,24151681,24161116,24162919,24164186,24169501,24181174,24186126,24187043,24187377,24197450,24209349,24211178,24217535,24219713,24224266,24241378,24255543,24255545,24262346,24263796,24267564,24268142,24279196,24281897,24283015,24288047,24288663,24290971,24292955,24390376,24390674,24391543,24397801,24402891,24404640,24406621,24415864,24415866,24416291,24421345,24428902,24429095,24431197,24434126,24436009,24439360,24439483,24441239,24442137,24590921,24591046,39322504,39322574\"}]},{\"service\":\"GUIDED_HELP\",\"params\":[{\"key\":\"logged_in\",\"value\":\"0\"}]},{\"service\":\"ECATCHER\",\"params\":[{\"key\":\"client.version\",\"value\":\"20230102\"},{\"key\":\"client.name\",\"value\":\"WEB_EMBEDDED_PLAYER\"},{\"key\":\"client.fexp\",\"value\":\"23882685,24390376,24186126,24429095,24255545,24161116,24288663,24120819,24421345,24406621,24002025,39322574,24428902,24439483,23934970,24390674,24224266,24402891,39322504,24404640,24181174,24002022,24439360,24034168,24211178,24279196,24187377,24283015,24164186,24591046,24241378,24004644,24209349,24007246,24036947,23998056,24262346,24416291,24436009,24187043,24415866,24217535,24263796,24267564,24442137,1714240,24255543,24140247,24431197,23804281,23983296,24397801,23946420,24135310,24080738,23966208,23918597,24288047,24434126,24219713,24151681,24162919,24292955,24077241,24290971,24441239,24268142,24590921,24169501,24391543,24281897,24197450,24415864,24108448\"}]}]},\"embedPreview\":{\"thumbnailPreviewRenderer\":{\"title\":{\"runs\":[{\"text\":\"M3GAN - official trailer 2\"}]},\"defaultThumbnail\":{\"thumbnails\":[{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/default.jpg\",\"width\":120,\"height\":90},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/hqdefault.jpg?sqp\u003d-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ\u003d\u003d\\u0026rs\u003dAOn4CLASxRVZaCE2_G3GSUWObxinpHYjYA\",\"width\":168,\"height\":94},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/hqdefault.jpg?sqp\u003d-oaymwEWCMQBEG5IWvKriqkDCQgBFQAAiEIYAQ\u003d\u003d\\u0026rs\u003dAOn4CLCCzNlBGRImdzJuGrJAU6-vrkfG8w\",\"width\":196,\"height\":110},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/hqdefault.jpg?sqp\u003d-oaymwEXCPYBEIoBSFryq4qpAwkIARUAAIhCGAE\u003d\\u0026rs\u003dAOn4CLBrUz00w-SP2WeraD83bvlUn5bRaA\",\"width\":246,\"height\":138},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/mqdefault.jpg\",\"width\":320,\"height\":180},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/hqdefault.jpg?sqp\u003d-oaymwEXCNACELwBSFryq4qpAwkIARUAAIhCGAE\u003d\\u0026rs\u003dAOn4CLDzOw89Vwszr6AOuzivBFuLzUMdfQ\",\"width\":336,\"height\":188},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/hqdefault.jpg\",\"width\":480,\"height\":360},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/sddefault.jpg\",\"width\":640,\"height\":480},{\"url\":\"https://i.ytimg.com/vi/OoDHM_A1axc/maxresdefault.jpg\",\"width\":1920,\"height\":1080}]},\"playButton\":{\"buttonRenderer\":{\"style\":\"STYLE_DEFAULT\",\"size\":\"SIZE_DEFAULT\",\"isDisabled\":false,\"navigationEndpoint\":{\"clickTrackingParams\":\"CAcQ8FsiEwj9qPic_bL8AhVEk9gFHaP2Cis\u003d\",\"watchEndpoint\":{\"videoId\":\"OoDHM_A1axc\"}},\"accessibility\":{\"label\":\"Play M3GAN - official trailer 2\"},\"trackingParams\":\"CAcQ8FsiEwj9qPic_bL8AhVEk9gFHaP2Cis\u003d\"}},\"videoDetails\":{\"embeddedPlayerOverlayVideoDetailsRenderer\":{\"channelThumbnail\":{\"thumbnails\":[{\"url\":\"https://yt3.ggpht.com/_xmrueXlQyPmO379bSt2BjirLWXxNOUoQn1jV0DpOlxxeCGlx9Z2L9HxfoWMgdsdIyGFh17W1A\u003ds68-c-k-c0x00ffffff-no-rj\",\"width\":68,\"height\":68}]},\"collapsedRenderer\":{\"embeddedPlayerOverlayVideoDetailsCollapsedRenderer\":{\"title\":{\"runs\":[{\"text\":\"M3GAN - official trailer 2\",\"navigationEndpoint\":{\"clickTrackingParams\":\"CAYQ46ICIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"urlEndpoint\":{\"url\":\"http://www.youtube.com/watch?v\u003dOoDHM_A1axc\"}}}]},\"subtitle\":{\"runs\":[{\"text\":\"19M views • 6.6K comments\"}]},\"trackingParams\":\"CAYQ46ICIhMI_aj4nP2y_AIVRJPYBR2j9gor\"}},\"expandedRenderer\":{\"embeddedPlayerOverlayVideoDetailsExpandedRenderer\":{\"title\":{\"runs\":[{\"text\":\"Universal Pictures\"}]},\"subscribeButton\":{\"subscribeButtonRenderer\":{\"buttonText\":{\"runs\":[{\"text\":\"Subscribe\"}]},\"subscribed\":false,\"enabled\":true,\"type\":\"FREE\",\"channelId\":\"UCq0OueAsdxH6b8nyAspwViw\",\"showPreferences\":false,\"subscribedButtonText\":{\"runs\":[{\"text\":\"Subscribed\"}]},\"unsubscribedButtonText\":{\"runs\":[{\"text\":\"Subscribe\"}]},\"trackingParams\":\"CAQQmysiEwj9qPic_bL8AhVEk9gFHaP2CisyCWl2LWVtYmVkcw\u003d\u003d\",\"unsubscribeButtonText\":{\"runs\":[{\"text\":\"Unsubscribe\"}]},\"serviceEndpoints\":[{\"clickTrackingParams\":\"CAQQmysiEwj9qPic_bL8AhVEk9gFHaP2CisyCWl2LWVtYmVkcw\u003d\u003d\",\"subscribeEndpoint\":{\"channelIds\":[\"UCq0OueAsdxH6b8nyAspwViw\"],\"params\":\"EgIIBxgA\"}},{\"clickTrackingParams\":\"CAQQmysiEwj9qPic_bL8AhVEk9gFHaP2CisyCWl2LWVtYmVkcw\u003d\u003d\",\"unsubscribeEndpoint\":{\"channelIds\":[\"UCq0OueAsdxH6b8nyAspwViw\"],\"params\":\"CgIIBxgA\"}}],\"notificationPreferenceToggleButton\":{\"toggleButtonRenderer\":{\"isToggled\":false,\"isDisabled\":false,\"defaultIcon\":{\"iconType\":\"CHANNEL_NOTIFICATION_PREFERENCE_OFF\"},\"defaultServiceEndpoint\":{\"clickTrackingParams\":\"CAUQmE0iEwj9qPic_bL8AhVEk9gFHaP2CisyHFBSRUZFUkVOQ0VfQUxMX05PVElGSUNBVElPTlM\u003d\",\"modifyChannelNotificationPreferenceEndpoint\":{\"params\":\"ChhVQ3EwT3VlQXNkeEg2YjhueUFzcHdWaXcSAggCGAE%3D\"}},\"toggledIcon\":{\"iconType\":\"CHANNEL_NOTIFICATION_PREFERENCE_ON\"},\"toggledServiceEndpoint\":{\"clickTrackingParams\":\"CAUQmE0iEwj9qPic_bL8AhVEk9gFHaP2CisyElBSRUZFUkVOQ0VfREVGQVVMVA\u003d\u003d\",\"modifyChannelNotificationPreferenceEndpoint\":{\"params\":\"ChhVQ3EwT3VlQXNkeEg2YjhueUFzcHdWaXcSAggBGAE%3D\"}},\"trackingParams\":\"CAUQmE0iEwj9qPic_bL8AhVEk9gFHaP2Cis\u003d\",\"defaultTooltip\":\"Receive notifications about every new video\",\"toggledTooltip\":\"Stop receiving notifications about every new video\"}}}},\"subtitle\":{\"runs\":[{\"text\":\"7.06M subscribers\"}]},\"trackingParams\":\"CAMQ5KICIhMI_aj4nP2y_AIVRJPYBR2j9gor\"}},\"channelThumbnailEndpoint\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"channelThumbnailEndpoint\":{\"urlEndpoint\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"urlEndpoint\":{\"url\":\"/channel/UCq0OueAsdxH6b8nyAspwViw\"}}}}}},\"shareButton\":{\"buttonRenderer\":{\"style\":\"STYLE_OPACITY\",\"size\":\"SIZE_DEFAULT\",\"isDisabled\":false,\"text\":{\"runs\":[{\"text\":\"Share\"}]},\"icon\":{\"iconType\":\"SHARE_ARROW\"},\"navigationEndpoint\":{\"clickTrackingParams\":\"CAIQ-N8BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"shareVideoEndpoint\":{\"videoId\":\"OoDHM_A1axc\",\"videoShareUrl\":\"https://youtu.be/OoDHM_A1axc\",\"videoTitle\":\"M3GAN - official trailer 2\"}},\"trackingParams\":\"CAIQ-N8BIhMI_aj4nP2y_AIVRJPYBR2j9gor\"}},\"addToWatchLaterButton\":{\"buttonRenderer\":{\"style\":\"STYLE_OPACITY\",\"size\":\"SIZE_DEFAULT\",\"isDisabled\":false,\"text\":{\"runs\":[{\"text\":\"Watch Later\"}]},\"serviceEndpoint\":{\"clickTrackingParams\":\"CAEQ-d8BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"playlistEditEndpoint\":{\"playlistId\":\"WL\",\"actions\":[{\"addedVideoId\":\"OoDHM_A1axc\",\"action\":\"ACTION_ADD_VIDEO\"}]}},\"icon\":{\"iconType\":\"ADD_TO_WATCH_LATER\"},\"accessibility\":{\"label\":\"Saved to Watch Later\"},\"trackingParams\":\"CAEQ-d8BIhMI_aj4nP2y_AIVRJPYBR2j9gor\"}},\"videoDurationSeconds\":\"139\",\"webPlayerActionsPorting\":{\"getSharePanelCommand\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"webPlayerShareEntityServiceEndpoint\":{\"serializedShareEntity\":\"CgtPb0RITV9BMWF4Yw%3D%3D\"}},\"subscribeCommand\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"subscribeEndpoint\":{\"channelIds\":[\"UCq0OueAsdxH6b8nyAspwViw\"],\"params\":\"EgIIBxgA\"}},\"unsubscribeCommand\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"unsubscribeEndpoint\":{\"channelIds\":[\"UCq0OueAsdxH6b8nyAspwViw\"],\"params\":\"CgIIBxgA\"}},\"addToWatchLaterCommand\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"playlistEditEndpoint\":{\"playlistId\":\"WL\",\"actions\":[{\"addedVideoId\":\"OoDHM_A1axc\",\"action\":\"ACTION_ADD_VIDEO\"}]}},\"removeFromWatchLaterCommand\":{\"clickTrackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"playlistEditEndpoint\":{\"playlistId\":\"WL\",\"actions\":[{\"action\":\"ACTION_REMOVE_VIDEO_BY_VIDEO_ID\",\"removedVideoId\":\"OoDHM_A1axc\"}]}}}}},\"trackingParams\":\"CAAQru4BIhMI_aj4nP2y_AIVRJPYBR2j9gor\",\"permissions\":{\"allowAdEvents\":false,\"allowImaMonetization\":false},\"attestation\":{\"playerAttestationRenderer\":{\"challenge\":\"a\u003d5\\u0026a2\u003d1\\u0026c\u003d1673009276\\u0026d\u003d56\\u0026e\u003dOoDHM_A1axc\\u0026c1a\u003d1\\u0026c6a\u003d1\\u0026c6b\u003d1\\u0026hh\u003dNF4KehprrKDgUPxT8TcHFzQv0lC2cPaJrDkVmm03_NM\",\"botguardData\":{\"program\":\"\u003d\",\"interpreterSafeUrl\":{\"privateDoNotAccessOrElseTrustedResourceUrlWrappedValue\":\"//www.google.com/js/th/YkfklCtf3s5-_1quWHAnTHHVaBZ-i7ToAeXFpu3i2Ro.js\"},\"serverEnvironment\":1}}},\"videoFlags\":{\"playableInEmbed\":true,\"isCrawlable\":true,\"isShortsEligible\":false},\"previewPlayabilityStatus\":{\"status\":\"OK\",\"playableInEmbed\":true,\"contextParams\":\"Q0FFU0FnZ0E\u003d\"},\"embeddedPlayerMode\":\"EMBEDDED_PLAYER_MODE_DEFAULT\"}","start":0,"video_id":"OoDHM_A1axc"},"POST_MESSAGE_ORIGIN":"*","VIDEO_ID":"OoDHM_A1axc","DOMAIN_ADMIN_STATE":""});window.ytcfg.obfuscatedData_ = [];</script><script nonce="0RJ1PUdOd1ax9OgG38dqmA">var yterr = yterr || true;</script><script src="/s/player/e5f6cbd5/www-embed-player.vflset/www-embed-player.js" nonce="0RJ1PUdOd1ax9OgG38dqm
                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

                                                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                             
script><script src="/s/player/e5f6cbd5/player_ias.vflset/en_GB/base.js" nonce="0RJ1PUdOd1ax9OgG38dqm
                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

                                                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                             
script><script src="/s/player/e5f6cbd5/fetch-polyfill.vflset/fetch-polyfill.js" nonce="0RJ1PUdOd1ax9OgG38dqm
                                                                              


                                                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                             
script><title>YouTube</title><link rel="canonical" href="https://www.youtube.com/watch?v=OoDHM_A1axc"></head><body class="date-20230106 en_GB ltr  site-center-aligned site-as-giant-card webkit webkit-537" dir="ltr"><div id="player"></div><script nonce="0RJ1PUdOd1ax9OgG38dqmA">writeEmbed();</script><script nonce="0RJ1PUdOd1ax9OgG38dqmA">ytcsi.info('st',  38.0 );</script><noscript><div class="player-unavailable"><h1 class="message">An error occurred.</h1><div class="submessage"><a href="https://www.youtube.com/watch?v=OoDHM_A1axc" target="_blank">Try watching this video on www.youtube.com</a>, or enable JavaScript if it is disabled in your browser.</div></div></noscript></body></html>
z
End
fSq0qKSACw">ytcsi.info('st',  37.0 );</script><noscript><div class="player-unavailable"><h1 class="message">An error occurred.</h1><div class="submessage"><a href="https://www.youtube.com/watch?v=OoDHM_A1axc" target="_blank">Try watching this video on www.youtube.com</a>, or enable JavaScript if it is disabled in your browser.</div></div></noscript></body></html>
z
End
                                                                                                                                                                                                                                                                                                                                                                                                                                                        </script><title>YouTube</title><link rel="canonical" href="https://www.youtube.com/watch?v=OoDHM_A1axc"></head><body class="date-20230106 en_GB ltr  site-center-aligned site-as-giant-card webkit webkit-537" dir="ltr"><div id="player"></div><script nonce="HkzvB7AhtzqCCYd1T5eetg">writeEmbed();</script><script nonce="HkzvB7AhtzqCCYd1T5eetg">ytcsi.info('st',  31.0 );</script><noscript><div class="player-unavailable"><h1 class="message">An error occurred.</h1><div class="submessage"><a href="https://www.youtube.com/watch?v=OoDHM_A1axc" target="_blank">Try watching this video on www.youtube.com</a>, or enable JavaScript if it is disabled in your browser.</div></div></noscript></body></html>
z
End
